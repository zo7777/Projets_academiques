# Création carte Leaflet
map <- leaflet() %>%
addTiles() %>%
setView(lng = 0, lat = 0, zoom = 1)
# Ajouter les polygones des pays depuis data_geom_sf
map <- addPolygons(
map,
data = data_geom,
fillColor = "blue",  # Couleur de remplissage
fillOpacity = 0.7,   # Opacité du remplissage
color = "white",     # Couleur de la bordure
weight = 1,          # Épaisseur de la bordure
popup = ~paste("<strong>Country:</strong> ", Country_Name),
highlightOptions = highlightOptions(
color = "black",      # Couleur de surbrillance
weight = 2,           # Épaisseur de la surbrillance
bringToFront = TRUE   # Mettre en avant lors de la surbrillance
)
)
map <-addControl(
map,
position = "topright",  # Position du titre
html = title_html <- '<h3 style="text-align: center;">Carte des pays disponibles</h3>' # Titre de la carte
)
# Afficher la carte
map
# Carte Emissions Co2 cumulées sur 11 ans
pal <- colorBin("YlOrRd", domain = data_geom_sum_emissions$CO2_emissions,bins = c(0, 25, 50, 75, 100, 250, 450))
map_emissions <- leaflet(data_geom_sum_emissions) |>
addTiles() |>
addPolygons(fillColor = ~ pal(CO2_emissions),
fillOpacity = 0.7,
color = "black",
weight = 1,
popup = ~paste("<strong>Country:</strong> ", Country_Name),
highlightOptions = highlightOptions(
color = "black",      # Couleur de surbrillance
weight = 2,           # Épaisseur de la surbrillance
bringToFront = TRUE   # Mettre en avant lors de la surbrillance
)
) |>
addLegend(
pal = pal,
values = ~CO2_emissions,
opacity = 0.7,
title = "CO2_emissions",
position = "bottomright"
) |>
addControl(
position = "topright",  # Position du titre
html = title_html <- '<h3 style="text-align: center;">Carte des pays et leur émission de CO2/hbts de 2003 à 2014 en cumule</h3>' # Titre de la carte
)
map_emissions
# Carte pour le PIB (moyenne sur 11 ans)
pal <- colorBin("YlOrRd", domain = data_geom_mean_gdp$GDP_PPP, bins = c(0, 5000, 10000, 15000, 25000, 40000, 120000))
# Create a leaflet map
map_GDP <- leaflet(data = data_geom_mean_gdp) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(GDP_PPP),
fillOpacity = 0.7,
color = "black",
weight = 1,
popup = ~paste("<strong>Country:</strong> ", Country_Name),
highlightOptions = highlightOptions(
color = "black",      # Couleur de surbrillance
weight = 2,           # Épaisseur de la surbrillance
bringToFront = TRUE   # Mettre en avant lors de la surbrillance
)
) %>%
addLegend(
pal = pal,
values = ~GDP_PPP,
opacity = 0.7,
title = "GDP_PPP",
position = "bottomright"
) |>
addControl(
position = "topright",  # Position du titre
html = title_html <- '<h3 style="text-align: center;">Carte des pays et leur moyenne de PIB/hbt de 2003 à 2014</h3>' # Titre de la carte
)
map_GDP
# Treemap emission Co2 2003
# Base de données
data_y_2003 <- donnees %>%
filter(Time == 2003) %>%
select(Country_Name,CO2_emissions,GDP_PPP)
data_y_2003$CO2_emissions2 <- round(data_y_2003$CO2_emissions,2)
# Représentation graphique
treemap(data_y_2003,
index=c("Country_Name","CO2_emissions2"),
vSize="CO2_emissions2",
type="index",
fontsize.labels = c(10,8),
fontcolor.labels = c("black","white"),
align.labels = list(c("center","top"),
c("center","center")),
title = "Treemap des emissions de CO2(en tonnes par habitant) en 2003"
)
# Base de données
data_y_2014 <- donnees %>%
filter(Time == 2014) %>%
select(Country_Name,CO2_emissions,GDP_PPP)
data_y_2014$CO2_emissions2 <- round(data_y_2014$CO2_emissions,2)
# Représentation graphique
treemap(data_y_2014,
index=c("Country_Name","CO2_emissions2"),
vSize="CO2_emissions",
type="index",
fontsize.labels = c(10,8),
fontcolor.labels = c("black","white"),
align.labels = list(c("center","top"),
c("center","center")),
title = "Treemap des emissions de CO2 (en tonnes par habitant) en 2014"
)
data_y_2003$GDP_PPP <- round(data_y_2003$GDP_PPP,0)
# Représentation graphique
treemap(data_y_2003,
index=c("Country_Name","GDP_PPP"),
vSize="GDP_PPP",
type="index",
fontsize.labels = c(10,8),
fontcolor.labels = c("black","white"),
align.labels = list(c("center","top"),
c("center","center")),
title = "Treemap des PIB PPP par habitant($/habitant) en 2003"
)
data_y_2014$GDP_PPP <- round(data_y_2014$GDP_PPP,0)
# Représentation graphique
treemap(data_y_2014,
index=c("Country_Name","GDP_PPP"),
vSize="GDP_PPP",
type="index",
fontsize.labels = c(10,8),
fontcolor.labels = c("black","white"),
align.labels = list(c("center","top"),
c("center","center")),
title = "Treemap des PIB PPP par habitant($/habitant) en 2014"
)
ten_country_emissions <- data_sum_emissions %>%
arrange(desc(CO2_emissions)) %>%
head(10)
plt <- ggplot(ten_country_emissions) +
geom_col(aes(x = reorder(Country_Name, -CO2_emissions), y = CO2_emissions), fill = "blue", width = 0.6) +
theme_minimal() +
theme(axis.text.y = element_text(size = 5),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
labs(x="Pays",y="Emissions de CO2 (en tonnes par habitant)") +
ggtitle("Top 10 des pays ayant émis plus de CO2/hbts de 2003 à 2014 en cumulé")
# Afficher le tracé
print(plt)
country <- c(ten_country_emissions$Country_Name)
data_boxplot <- donnees %>%
filter(Country_Name %in% country)
amBoxplot(log_CO2~Country_Name,
data=data_boxplot,
main="Emissions de CO2 en tonnes par habitant des 10 pays les plus émetteurs en cumulé",
xlab="Pays",
col="orange",
border="brown"
) |> amOptions(labelRotation = 45)
N <- ggplot(data = data_boxplot, aes(x = log_GDP_PPP, y = log_CO2, color = Country_Name)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggtitle("Nuage de points du log des émissions de CO2 en fonction du log du PIB/hab")
# Convertir le graphique ggplot en Plotly
N_plotly <- ggplotly(N)
# Afficher le graphique Plotly
N_plotly
N <- data_boxplot %>%
ggplot(aes(x = Time, y = Agricultural_land, color = Country_Name)) +
geom_line() +
labs(title = "Évolution de la part de terres agricoles de 2003 à 2014",
x = "Année",
y = "Agricultural Land") +
theme_minimal()
ggplotly(N)
N <- data_boxplot %>%
ggplot(aes(x = Time, y = Clean_energy, color = Country_Name)) +
geom_line() +
labs(title = "Évolution de l'utilisation d'énergies vertes de 2003 à 2014",
x = "Année",
y = "Clean Energy") +
theme_minimal()
ggplotly(N)
N <- data_boxplot %>%
ggplot(aes(x = Time, y = Electric_power, color = Country_Name)) +
geom_line() +
labs(title = "Évolution de la consommation électrique de 2003 à 2014",
x = "Année",
y = "Electric Power") +
theme_minimal()
ggplotly(N)
data_corr <- donnees %>%
select(Agricultural_land,Clean_energy,Electric_power,log_GDP_PPP, log_CO2)
corr <- round(cor(data_corr), 2)
ggcorrplot(corr, hc.order = TRUE, type = "upper",
outline.col = "white",lab = TRUE)
# Modèle pooled
reg_pooled = plm(log_CO2 ~ log_GDP_PPP + log_GDP_PPP_2 + Agricultural_land + Clean_energy + Electric_power,
model="pooling",
data=donnees)
# Modèle à effets fixes individuels
reg_within = plm(log_CO2 ~ log_GDP_PPP + log_GDP_PPP_2 + Agricultural_land + Clean_energy + Electric_power,
effect="individual",
model="within",
data=donnees)
# Réalisation du test
Test_effets_fixes <- pFtest(reg_within,reg_pooled)
# Incorporation des résultats du test dans un jeu de données
Titre <- Test_effets_fixes$method
Statistic <- Test_effets_fixes$statistic
df1 <- Test_effets_fixes$parameter[1]
df2 <- Test_effets_fixes$parameter[2]
p <- Test_effets_fixes$p.value
Donnees_test_effets_fixes <- data.frame(Statistic, df1, df2, p)
colnames(Donnees_test_effets_fixes) <- c("Statistic", "df1", "df2", "p-value")
rownames(Donnees_test_effets_fixes) <- c(1)
# Présentation des résultats du test
knitr::kable(Donnees_test_effets_fixes, caption = Titre, digits = 2, align = "c")
# Réalisation du test
Test_LM <- pcdtest(reg_within, test=c("lm"))
# Incorporation des résultats du test dans un jeu de données
Titre <- Test_LM$method
Statistic <- Test_LM$statistic
df <- Test_LM$parameter
p <- Test_LM$p.value
Donnees_test_LM <- data.frame(Statistic, df, p)
colnames(Donnees_test_LM) <- c("Statistic", "df", "p-value")
rownames(Donnees_test_LM) <- c(1)
# Présentation des résultats du test
knitr::kable(Donnees_test_LM, caption = Titre, digits = 2, align = "c")
# Réalisation du test
Test_autocorr <- pbgtest(reg_within)
# Incorporation des résultats du test dans un jeu de données
Titre <- Test_autocorr$method
Statistic <- Test_autocorr$statistic
df <- Test_autocorr$parameter
p <- Test_autocorr$p.value
Donnees_test_autocorr <- data.frame(Statistic, df, p)
colnames(Donnees_test_autocorr) <- c("Statistic", "df", "p-value")
rownames(Donnees_test_autocorr) <- c(1)
# Présentation des résultats du test
knitr::kable(Donnees_test_autocorr, caption = Titre, digits = 2, align = "c")
# Implémantation du modèle
reg_pgglsI = pggls(log_CO2 ~ log_GDP_PPP + log_GDP_PPP_2 + Agricultural_land + Clean_energy + Electric_power,
effect="individual",
model="within",
data=donnees)
#summary(reg_pgglsI)
# Incorporation des résultats du modèle dans un jeu de données
Titre <- "Oneway (individual) effect Within FGLS model on a balanced Panel: n = 125, T = 12, N = 1500"
Coeffs <- c(reg_pgglsI$coefficients)
Std <- c(3.2821e-01, 1.7127e-02, 1.7643e-03, 1.2191e-03, 3.6066e-06)
Z_value <- c(5.0586, -3.5703, 0.1859976, -12.6272, 2.9118)
p_value <- c(4.224e-07, 0.0003566, 0.1859976,  2.2e-16, 0.0035938)
Donnees_modele <- data.frame(Coeffs, Std, Z_value, p_value)
colnames(Donnees_modele) <- c("Coefficient", "Standard error", "z-value" , "p-value")
rownames(Donnees_modele) <- c("log(GDP per capita PPP)",
"log(GDP per capita PPP)²",
"Agricultural land",
"Clean energy",
"Electric power")
# Présentation des résultats
knitr::kable(Donnees_modele, caption = Titre, digits = 2, align = "c")
# Fonction permettant de tracer la courbe de Kuznets
# à partir du résultat de notre modèle
Kuznets <- function(x){
-0.06*x**2 + 1.66*x
}
# Tracé de la courbe
ggplot(data.frame(x = 0:28), aes(x))+
geom_density() +
geom_function(fun = Kuznets, colour = "red", size = 0.75) +
geom_segment(x=0, xend=0, y=0, yend=12) +
xlab("log(GDP)") +
xlim(0,27.9) +
ylab("log(CO2)") +
ylim(-0.199,12.5) +
labs(title = "Courbe d'équation obtenue par les coefficients du modèle") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Calcul des effets fixes et incorporation des résultats dans un dataframe
Effets_fixes <- data.frame(fixef(reg_pgglsI))
Effets_fixes$fixef.reg_pgglsI. <- round(Effets_fixes$fixef.reg_pgglsI., digits = 2)
colnames(Effets_fixes) <- c("")
# Présentation des résultats
knitr::kable(Effets_fixes, caption = "Effets fixes individuels", digits = 2, align = "c")
knitr::opts_chunk$set(comment = NA)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
# Manipulation des données
library(tidyverse)
# Modèles de données de panel
library(plm)
# Summary des modèles élégants
library(stargazer)
# Création de graphique
library(ggplot2)
# Présentation élégante des données
library(knitr)
library(tidyr)
library(treemap)
library(ggplot2)
library(rAmCharts)
library(plotly)
library(ggcorrplot)
# Cartographie
library(sf)
library(rnaturalearth)
library(leaflet)
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Importation
donnees <- read.csv("Donnees_projet.csv",
header = TRUE,
sep = ";")
# Suppression de la variable Time_code
donnees <- subset(donnees, select = -c(2))
# Intervertir les 2 premières colonnes
donnees <- donnees[,c(2,1,3,4,5,6,7,8)]
# Transformation de variables
donnees$log_GDP_PPP <- log(donnees$GDP_PPP)
donnees$log_GDP_PPP_2 <- log(donnees$GDP_PPP)**2
donnees$log_CO2 <- log(donnees$CO2_emissions)
stargazer(donnees,type="text")
# Geometry & code des pays
ne_countries <- ne_countries(scale = "medium", returnclass = "sf")
# Conservation des colonnes noms de pays et leurs countries_code
code_countries <- ne_countries |>
select("sovereignt")
code_countries <- as.data.frame(code_countries) # transformation en data frame
colnames(code_countries)[1] <- "pays"
# View(code_countries)
#setdiff(donnees$Country_Name, code_countries$pays) # 7 pays non correspondant
# Correction des noms pour la jointure
donnees$Country_Name <- gsub("Czechia", "Czech Republic", donnees$Country_Name)
donnees$Country_Name <- gsub("Egypt, Arab Rep.", "Egypt", donnees$Country_Name)
donnees$Country_Name <- gsub("Iran, Islamic Rep.", "Iran", donnees$Country_Name)
donnees$Country_Name <- gsub("Cote d'Ivoire", "Ivory Coast", donnees$Country_Name)
donnees$Country_Name <- gsub("Kyrgyz Republic", "Kyrgyzstan", donnees$Country_Name)
donnees$Country_Name <- gsub("Slovak Republic", "Slovakia", donnees$Country_Name)
donnees$Country_Name <- gsub("United States", "United States of America", donnees$Country_Name)
donnees$Country_Name <- gsub("Congo, Rep.", "Republic of Congo", donnees$Country_Name)
donnees$Country_Name <- gsub("Congo, Dem. Rep.", "Democratic Republic of the Congo", donnees$Country_Name)
donnees$Country_Name <- gsub("Brunei Darussalam", "Brunei", donnees$Country_Name)
donnees$Country_Name <- gsub("North Macedonia", "Macedonia", donnees$Country_Name)
donnees$Country_Name <- gsub("Korea, Rep.", "South Korea", donnees$Country_Name)
donnees$Country_Name <- gsub("Russian Federation", "Russia", donnees$Country_Name)
donnees$Country_Name <- gsub("Tanzania", "United Republic of Tanzania", donnees$Country_Name)
donnees$Country_Name <- gsub("Turkiye", "Turkey", donnees$Country_Name)
data_sum_emissions <- aggregate(CO2_emissions ~ Country_Name, data = donnees, sum)
data_mean_gdp <- aggregate(GDP_PPP ~ Country_Name, data=donnees, mean)
# Ajout des géometries des pays
data_geom <- left_join(donnees, code_countries, by = c("Country_Name" = "pays"))
data_geom_mean_gdp <- left_join(data_mean_gdp, code_countries, by = c("Country_Name" = "pays"))
data_geom_sum_emissions <- left_join(data_sum_emissions, code_countries, by = c("Country_Name" = "pays"))
data_geom <- st_as_sf(data_geom)
data_geom_mean_gdp <- st_as_sf(data_geom_mean_gdp)
data_geom_sum_emissions <- st_as_sf(data_geom_sum_emissions)
# Création carte Leaflet
map <- leaflet() %>%
addTiles() %>%
setView(lng = 0, lat = 0, zoom = 1)
# Ajouter les polygones des pays depuis data_geom_sf
map <- addPolygons(
map,
data = data_geom,
fillColor = "blue",  # Couleur de remplissage
fillOpacity = 0.7,   # Opacité du remplissage
color = "white",     # Couleur de la bordure
weight = 1,          # Épaisseur de la bordure
popup = ~paste("<strong>Country:</strong> ", Country_Name),
highlightOptions = highlightOptions(
color = "black",      # Couleur de surbrillance
weight = 2,           # Épaisseur de la surbrillance
bringToFront = TRUE   # Mettre en avant lors de la surbrillance
)
)
map <-addControl(
map,
position = "topright",  # Position du titre
html = title_html <- '<h3 style="text-align: center;">Carte des pays disponibles</h3>' # Titre de la carte
)
# Afficher la carte
map
# Carte Emissions Co2 cumulées sur 11 ans
pal <- colorBin("YlOrRd", domain = data_geom_sum_emissions$CO2_emissions,bins = c(0, 25, 50, 75, 100, 250, 450))
map_emissions <- leaflet(data_geom_sum_emissions) |>
addTiles() |>
addPolygons(fillColor = ~ pal(CO2_emissions),
fillOpacity = 0.7,
color = "black",
weight = 1,
popup = ~paste("<strong>Country:</strong> ", Country_Name),
highlightOptions = highlightOptions(
color = "black",      # Couleur de surbrillance
weight = 2,           # Épaisseur de la surbrillance
bringToFront = TRUE   # Mettre en avant lors de la surbrillance
)
) |>
addLegend(
pal = pal,
values = ~CO2_emissions,
opacity = 0.7,
title = "CO2_emissions",
position = "bottomright"
) |>
addControl(
position = "topright",  # Position du titre
html = title_html <- '<h3 style="text-align: center;">Carte des pays et leur émission de CO2/hbts de 2003 à 2014 en cumule</h3>' # Titre de la carte
)
map_emissions
# Carte pour le PIB (moyenne sur 11 ans)
pal <- colorBin("YlOrRd", domain = data_geom_mean_gdp$GDP_PPP, bins = c(0, 5000, 10000, 15000, 25000, 40000, 120000))
# Create a leaflet map
map_GDP <- leaflet(data = data_geom_mean_gdp) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(GDP_PPP),
fillOpacity = 0.7,
color = "black",
weight = 1,
popup = ~paste("<strong>Country:</strong> ", Country_Name),
highlightOptions = highlightOptions(
color = "black",      # Couleur de surbrillance
weight = 2,           # Épaisseur de la surbrillance
bringToFront = TRUE   # Mettre en avant lors de la surbrillance
)
) %>%
addLegend(
pal = pal,
values = ~GDP_PPP,
opacity = 0.7,
title = "GDP_PPP",
position = "bottomright"
) |>
addControl(
position = "topright",  # Position du titre
html = title_html <- '<h3 style="text-align: center;">Carte des pays et leur moyenne de PIB/hbt de 2003 à 2014</h3>' # Titre de la carte
)
map_GDP
# Treemap emission Co2 2003
# Base de données
data_y_2003 <- donnees %>%
filter(Time == 2003) %>%
select(Country_Name,CO2_emissions,GDP_PPP)
data_y_2003$CO2_emissions2 <- round(data_y_2003$CO2_emissions,2)
# Représentation graphique
treemap(data_y_2003,
index=c("Country_Name","CO2_emissions2"),
vSize="CO2_emissions2",
type="index",
fontsize.labels = c(10,8),
fontcolor.labels = c("black","white"),
align.labels = list(c("center","top"),
c("center","center")),
title = "Treemap des emissions de CO2(en tonnes par habitant) en 2003"
)
# Base de données
data_y_2014 <- donnees %>%
filter(Time == 2014) %>%
select(Country_Name,CO2_emissions,GDP_PPP)
data_y_2014$CO2_emissions2 <- round(data_y_2014$CO2_emissions,2)
# Représentation graphique
treemap(data_y_2014,
index=c("Country_Name","CO2_emissions2"),
vSize="CO2_emissions",
type="index",
fontsize.labels = c(10,8),
fontcolor.labels = c("black","white"),
align.labels = list(c("center","top"),
c("center","center")),
title = "Treemap des emissions de CO2 (en tonnes par habitant) en 2014"
)
data_y_2003$GDP_PPP <- round(data_y_2003$GDP_PPP,0)
# Représentation graphique
treemap(data_y_2003,
index=c("Country_Name","GDP_PPP"),
vSize="GDP_PPP",
type="index",
fontsize.labels = c(10,8),
fontcolor.labels = c("black","white"),
align.labels = list(c("center","top"),
c("center","center")),
title = "Treemap des PIB PPP par habitant($/habitant) en 2003"
)
data_y_2014$GDP_PPP <- round(data_y_2014$GDP_PPP,0)
# Représentation graphique
treemap(data_y_2014,
index=c("Country_Name","GDP_PPP"),
vSize="GDP_PPP",
type="index",
fontsize.labels = c(10,8),
fontcolor.labels = c("black","white"),
align.labels = list(c("center","top"),
c("center","center")),
title = "Treemap des PIB PPP par habitant($/habitant) en 2014"
)
ten_country_emissions <- data_sum_emissions %>%
arrange(desc(CO2_emissions)) %>%
head(10)
plt <- ggplot(ten_country_emissions) +
geom_col(aes(x = reorder(Country_Name, -CO2_emissions), y = CO2_emissions), fill = "blue", width = 0.6) +
theme_minimal() +
theme(axis.text.y = element_text(size = 5),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
labs(x="Country",y="CO2 emission(tons per capita)") +
ggtitle("Top 10 countries which emited more cumulated CO2 from 2003 to 2014")#"Top 10 des pays ayant émis plus de CO2/hbts de 2003 à 2014 en cumulé"
# Afficher le tracé
print(plt)
