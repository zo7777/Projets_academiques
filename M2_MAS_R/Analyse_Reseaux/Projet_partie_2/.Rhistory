as_tibble() %>%
plot_ly(x = ~value) %>%
add_histogram(histnorm = "probability")%>%
layout(title = "Distribution of distances in the Lab network",
yaxis = list(title = 'Relative frequency'),
xaxis = list(title = 'Distance'))
closeness_in <- igraph::closeness(graph, mode = "in")
closeness_out <- igraph::closeness(graph, mode = "out")
closeness <- igraph::closeness(graph, mode = "total")
node_closeness <- data.frame(closeness = closeness) %>%
tibble::rownames_to_column()
union_characters <- left_join(lab_socio, node_closeness, by = c("identifiant" = "rowname"))
node_closeness %>%
arrange(-closeness) %>%
.[1:10, ]
node_closeness <- data.frame(closeness_in = closeness_in) %>%
tibble::rownames_to_column()
union_characters <- left_join(lab_socio, node_closeness, by = c("identifiant" = "rowname"))
node_closeness %>%
arrange(-closeness_in) %>%
.[1:10, ]
node_closeness <- data.frame(closeness_out = closeness_out) %>%
tibble::rownames_to_column()
union_characters <- left_join(lab_socio, node_closeness, by = c("identifiant" = "rowname"))
node_closeness %>%
arrange(-closeness_out) %>%
.[1:10, ]
betweenness <- igraph::betweenness(graph, directed = TRUE)
node_betweenness <- data.frame(betweenness = betweenness) %>%
tibble::rownames_to_column()
union_characters <- left_join(lab_socio, node_betweenness, by = c("identifiant" = "rowname"))
node_betweenness %>%
arrange(-betweenness) %>%
.[1:10, ]
edge_betweenness <- igraph::edge_betweenness(graph, directed = TRUE)
data.frame(edge = attr(E(graph), "vnames"),
betweenness = edge_betweenness) %>%
tibble::rownames_to_column() %>%
arrange(-betweenness) %>%
.[1:10, ]
A=as_adjacency_matrix(graph, type = c("both"),sparse=FALSE)
cat("The eigen value centrality of the graph is: ",eigen_centrality(graph)$value)
eigen_centrality(graph)$vector
num_dyads <- sum(degree(graph, mode = "in") > 0 & degree(graph, mode = "out") > 0)
cat("Number of dyads in the network:", num_dyads, "\n")
classify_dyad <- function(graph, node1, node2) {
has_edge1_to_2 <- are_adjacent(graph, v1 = node2, v2 = node1)
has_edge2_to_1 <- are_adjacent(graph, v1 = node2, v2 = node1)
if (has_edge1_to_2 && has_edge2_to_1) {
return("Mutual Dyad")
} else if (has_edge1_to_2) {
return("Asymmetric Dyad")
} else if (has_edge2_to_1) {
return("Reverse Asymmetric Dyad")
} else {
return("Null Dyad")
}
}
# Find and classify all dyads in the directed graph
dyad_types <- sapply(1:vcount(graph), function(node1) {
sapply(1:vcount(graph), function(node2) {
if (node1 != node2) {
return(classify_dyad(graph, node1, node2))
} else {
return(NA)  # Skip self-loops
}
})
})
# Print the result
colnames(dyad_types) <- colnames(A)
rownames(dyad_types) <- rownames(A)
print(dyad_types)
diameter.nodes <- get.diameter(graph)
V(graph)[diameter.nodes]$color <- "orange"
E(graph)$color<-"black"
E(graph, path=diameter.nodes)$color <- "orange"
plot(graph,
layout = layout,
vertex.label = gsub(" ", "\n", V(graph)$name),
vertex.shape = E(graph)$shape,
vertex.size = betweenness * 0.04,
vertex.frame.color = "gray",
vertex.label.color = "black",
vertex.label.cex = 0.8,
edge.width = edge_betweenness * 0.01,
edge.arrow.size = 0.5,
edge.color = E(graph)$color,
edge.lty = E(graph)$lty)
legend("topleft", legend = c("Node color:", as.character(color_vertices$revenu_sup_3000), NA, "Edge shape:", as.character(shapes_edges$shape)), pch = 19,
col = c(NA, color_vertices$color, NA, NA,NA), pt.cex = 5, cex = 2, bty = "n", ncol = 1)
legend("top", legend = "", cex = 2, bty = "n", ncol = 1,
title = "Graph of The people cited in the survey in LAB 8 with the diameter")
cat("The graph's density is: ",graph.density(graph))
cat("The graph's reciprocity is: ",reciprocity(graph))
cat("The graph's transitivity is: ",transitivity(graph))
# 4.a
data <- read.csv("BDD_Rescampus_cleaned.csv",header=T,sep=',')
t_m <- data.frame() # création d'un dataframe vide qui contiendra toutes les informations finales.
laboratoire <- unique(data$lab) # On récupère manière unique chaque labo
for (labo in 1:length(laboratoire)){
table_labo <- data[data$lab==laboratoire[labo],]
for (i in 1:nrow(table_labo)){
table_labo <- table_labo %>%
mutate(mean_doctorat = (sum(doctorat) - doctorat) / (n() - 1),
mean_revenu_sup_3000 = (sum(revenu_sup_3000) - revenu_sup_3000) / (n() - 1),
mean_femme = (sum(femme) - femme) / (n() - 1),
mean_age = (sum(age) - age) / (n() - 1),
mean_nb_HH = (sum(nb_HH) - nb_HH) / (n() - 1),
mean_recyclage_index = (sum(recyclage_index) - recyclage_index) / (n() - 1))
}
t_m <- rbind(t_m,table_labo)
}
manski <- lm(recyclage_index~.-identifiant-Q8A-Q8B-Q8C-Q8D-Q8E-Q8F-lab,data=t_m)
modele_manski <- lm(recyclage_index~doctorat+revenu_sup_3000+femme+age +nb_HH+mean_doctorat+
mean_revenu_sup_3000+ mean_femme+mean_age+mean_nb_HH+
mean_recyclage_index,data=t_m)
summary(modele_manski)
BDD_ResCampus <- read.csv("BDD_Rescampus_cleaned.csv",header=T,sep=',')
BDD_ResCampus<-as.data.frame(BDD_ResCampus)
G <- matrix(0,nrow=nrow(BDD_ResCampus),nrow(BDD_ResCampus))#adjacency matrix
for (j in 1:nrow(G)){ # for each individual
lstfr <- c(which(colnames(BDD_ResCampus)=="Q8A"):which(colnames(BDD_ResCampus)=="Q8F")) # unique identifiers for j's friends
for (k in lstfr){ # for each potential friendship relations
if (!is.na(BDD_ResCampus[j,k])){ # if named a friend
fr <- which(BDD_ResCampus$identifiant==BDD_ResCampus[j,k]) # find friend k' row number
if (length(fr)>0){ # if friend k is found
G[j,fr[1]] <- 1 # add link
}
}
}
}
diag(G) <- 0 # zero on diagonal
G<- G/rowSums(G)
G<-ifelse(is.nan(G),0,G) #of course dividing by zero yields NaN
modele_bramoulle <- iv_robust(recyclage_index~doctorat+revenu_sup_3000+femme+age +nb_HH
|
mean_doctorat+
mean_revenu_sup_3000+ mean_femme+mean_age+mean_nb_HH+
mean_recyclage_index +lab,
data=t_m,
clusters = lab)
summary(modele_bramoulle)
modele_bramoulle_fix <- iv_robust(recyclage_index~doctorat+revenu_sup_3000+femme+age +nb_HH
|
mean_doctorat+
mean_revenu_sup_3000+ mean_femme+mean_age+mean_nb_HH+
mean_recyclage_index,
data=t_m,
fixed_effects = ~lab)
summary(modele_bramoulle_fix)
library(flexdashboard)
library(rstudioapi)
library(reshape2)
library(igraph)
library(dplyr)
library(tidyverse)
library(plotly)
library(estimatr)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#install.packages("pacman",repos = "http://cran.us.r-project.org")
pacman::p_load(dplyr, ggplot2, sf,readr,readxl,tmap,tmaptools,opentripplanner)
data = read.csv("BDD_Rescampus_cleaned.csv",header=T,sep=',')
# 1.a
ggplot(data=data, aes(x=lab)) + geom_bar(stat = "count")
lab <- data |> filter(data$lab=="LAB8")
#1.b
lab$recyclage_index <- as.numeric(lab$recyclage_index)
summary(lab$recyclage_index)
#2.a
NW <- lab |> select(1:7)
#2.b
coll_cite <-  melt(NW, id.vars="identifiant")
coll_cite <- coll_cite |> select(-c("variable"))
#2.c
coll_cite <- coll_cite |> arrange(identifiant) |> na.omit()
#2.d
lab_socio <- lab |> select(c("identifiant","doctorat","revenu_sup_3000","femme",
"age","nb_HH","recyclage_index"))
# 3.a
comptage_personnes_citees <- function(dataset){
personnes <- unique(dataset$identifiant)
comptage <- c()
for(individu in personnes){
donnee <- dataset |> filter(dataset$identifiant==individu) |>
select(1:7)
nombre <- 0
for(i in 2:7){
if( !(is.na(donnee[,i])) ){
nombre <- nombre + 1
}
}
comptage <- c(comptage,nombre)
nombre <- 0
}
tableau_comptage <- data.frame(personnes,nbre_collegue_cite=comptage)
return(tableau_comptage)
}
tableau_comptage <- comptage_personnes_citees(data)
summary(tableau_comptage)
#3.b
personnes_isolees <- function(dataset){
personnes <- unique(dataset$identifiant)
isole <- c()
for(individu in personnes){
if( !(individu %in% dataset[,2]) && !(individu %in% dataset[,3]) &&
!(individu %in% dataset[,4]) && !(individu %in% dataset[,5]) &&
!(individu %in% dataset[,6]) && !(individu %in% dataset[,7]) ){
isole <- c(isole,individu)
}
}
return(isole)
}
isole <- personnes_isolees(data)
cat("Les individus du Laboratoire 8 isoles sont: \n",isole,"\n",
"Ils sont au nombre de : ",length(isole))
#3.c
creation_color_shape <- function(){
color <- c()
shape <- c()
for(individu in coll_cite$identifiant){
donnee <- lab_socio |> filter(lab_socio$identifiant == individu)
if(donnee[1,"revenu_sup_3000"] == 1 ){
color <- c(color,"red")
}else{
color <- c(color,"green")
}
if(donnee[1,"doctorat"]==1){
shape <- c(shape,"square")
}else{
shape <- c(shape,"circle")
}
}
coll_cite <- cbind(coll_cite,color,shape)
return(coll_cite)
}
coll_cite <- creation_color_shape()
assignment_color <- function(){
color <- c()
for(i in 1:nrow(lab_socio)){
if(lab_socio[i,"revenu_sup_3000"] == 1){
color <- c(color,"red")
}else{
color <- c(color,"green")
}
}
lab_socio <- cbind(lab_socio,color)
return(lab_socio)
}
lab_socio <- assignment_color()
graph <- graph_from_data_frame(coll_cite, directed = TRUE, vertices = lab_socio)
color_vertices <- lab_socio %>%
group_by(revenu_sup_3000, color) %>%
summarise(n = n())
shapes_edges <- coll_cite %>%
group_by(shape) %>%
summarise(n = n())
color_vertices$revenu_sup_3000 <- as.character(color_vertices$revenu_sup_3000)
for(i in 1:nrow(color_vertices)){
if(color_vertices[i,"revenu_sup_3000"] == 1){
color_vertices[i,"revenu_sup_3000"] = "revenu > 3000"
}else{
color_vertices[i,"revenu_sup_3000"] = "revenu < 3000"
}
}
for(i in 1:nrow(shapes_edges)){
if(shapes_edges[i,"shape"] == "square"){
shapes_edges[i,"shape"] = "square: doctorat"
}else{
shapes_edges[i,"shape"] = "circle: NON doctorat"
}
}
layout <- layout_with_fr(graph)
E(graph)$color<-"black"
plot(graph,
layout=layout,
vertex.label = gsub(" ", "\n", V(graph)$name),
vertex.shape = E(graph)$shape,
vertex.color = V(graph)$color,
vertex.size = (V(graph)$recyclage_index + 0.3) * 5,
vertex.frame.color = "gray",
vertex.label.color = "black",
vertex.label.cex = 0.8,
edge.arrow.size = 0.5)
legend("topleft", legend = c(NA, "Node color:", as.character(color_vertices$revenu_sup_3000), NA, "Edge shape:", as.character(shapes_edges$shape)), pch = 19,
col = c(NA, NA, color_vertices$color, NA, NA), pt.cex = 5, cex = 2, bty = "n", ncol = 1,
title = "")
legend("topleft", legend = "", cex = 4, bty = "n", ncol = 1,
title = "Graph of The people cited in the survey in LAB 8")
#3.d
graph_degree_in <- igraph::degree(graph, mode = "in")
graph_degree_out <- igraph::degree(graph, mode = "out")
graph_degree <- igraph::degree(graph, mode = "total")
node_degree <- data.frame(degree = graph_degree) %>%
tibble::rownames_to_column()
union_characters <- left_join(lab_socio, node_degree, by = c("identifiant" = "rowname"))
node_degree %>%
arrange(-degree) %>%
.[1:10, ]
node_degree <- data.frame(degree_in = graph_degree_in) %>%
tibble::rownames_to_column()
union_characters <- left_join(lab_socio, node_degree, by = c("identifiant" = "rowname"))
node_degree %>%
arrange(-degree_in) %>%
.[1:10, ]
node_degree <- data.frame(degree_out = graph_degree_out) %>%
tibble::rownames_to_column()
union_characters <- left_join(lab_socio, node_degree, by = c("identifiant" = "rowname"))
node_degree %>%
arrange(-degree_out) %>%
.[1:10, ]
graph_degree %>%
as.vector() %>%
as_tibble() %>%
plot_ly(x = ~value) %>%
add_histogram(histnorm = "probability")%>%
layout(title = "Distribution of degrees in the Lab network",
yaxis = list(title = 'Relative frequency'),
xaxis = list(title = 'Degree'))
graph_degree_in %>%
as.vector() %>%
as_tibble() %>%
plot_ly(x = ~value) %>%
add_histogram(histnorm = "probability")%>%
layout(title = "Distribution of degrees(incoming) in the Lab network",
yaxis = list(title = 'Relative frequency'),
xaxis = list(title = 'Degree'))
graph_degree_out %>%
as.vector() %>%
as_tibble() %>%
plot_ly(x = ~value) %>%
add_histogram(histnorm = "probability")%>%
layout(title = "Distribution of degrees(outgoing) in the Lab network",
yaxis = list(title = 'Relative frequency'),
xaxis = list(title = 'Degree'))
cat("The average distance in the network is: ",mean_distance(graph))
graph %>%
distances() %>%
as.vector() %>%
as_tibble() %>%
plot_ly(x = ~value) %>%
add_histogram(histnorm = "probability")%>%
layout(title = "Distribution of distances in the Lab network",
yaxis = list(title = 'Relative frequency'),
xaxis = list(title = 'Distance'))
closeness_in <- igraph::closeness(graph, mode = "in")
closeness_out <- igraph::closeness(graph, mode = "out")
closeness <- igraph::closeness(graph, mode = "total")
node_closeness <- data.frame(closeness = closeness) %>%
tibble::rownames_to_column()
union_characters <- left_join(lab_socio, node_closeness, by = c("identifiant" = "rowname"))
node_closeness %>%
arrange(-closeness) %>%
.[1:10, ]
node_closeness <- data.frame(closeness_in = closeness_in) %>%
tibble::rownames_to_column()
union_characters <- left_join(lab_socio, node_closeness, by = c("identifiant" = "rowname"))
node_closeness %>%
arrange(-closeness_in) %>%
.[1:10, ]
node_closeness <- data.frame(closeness_out = closeness_out) %>%
tibble::rownames_to_column()
union_characters <- left_join(lab_socio, node_closeness, by = c("identifiant" = "rowname"))
node_closeness %>%
arrange(-closeness_out) %>%
.[1:10, ]
betweenness <- igraph::betweenness(graph, directed = TRUE)
node_betweenness <- data.frame(betweenness = betweenness) %>%
tibble::rownames_to_column()
union_characters <- left_join(lab_socio, node_betweenness, by = c("identifiant" = "rowname"))
node_betweenness %>%
arrange(-betweenness) %>%
.[1:10, ]
edge_betweenness <- igraph::edge_betweenness(graph, directed = TRUE)
data.frame(edge = attr(E(graph), "vnames"),
betweenness = edge_betweenness) %>%
tibble::rownames_to_column() %>%
arrange(-betweenness) %>%
.[1:10, ]
A=as_adjacency_matrix(graph, type = c("both"),sparse=FALSE)
cat("The eigen value centrality of the graph is: ",eigen_centrality(graph)$value)
eigen_centrality(graph)$vector
num_dyads <- sum(degree(graph, mode = "in") > 0 & degree(graph, mode = "out") > 0)
cat("Number of dyads in the network:", num_dyads, "\n")
classify_dyad <- function(graph, node1, node2) {
has_edge1_to_2 <- are_adjacent(graph, v1 = node2, v2 = node1)
has_edge2_to_1 <- are_adjacent(graph, v1 = node2, v2 = node1)
if (has_edge1_to_2 && has_edge2_to_1) {
return("Mutual Dyad")
} else if (has_edge1_to_2) {
return("Asymmetric Dyad")
} else if (has_edge2_to_1) {
return("Reverse Asymmetric Dyad")
} else {
return("Null Dyad")
}
}
# Find and classify all dyads in the directed graph
dyad_types <- sapply(1:vcount(graph), function(node1) {
sapply(1:vcount(graph), function(node2) {
if (node1 != node2) {
return(classify_dyad(graph, node1, node2))
} else {
return(NA)  # Skip self-loops
}
})
})
# Print the result
colnames(dyad_types) <- colnames(A)
rownames(dyad_types) <- rownames(A)
list_dyad_types <- c()
for(i in 1:nrow(dyad_types)){
for(j in 1:ncol(dyad_types)){
list_dyad_types <- c(list_dyad_types, dyad_types[i,j])
}
}
list_dyad_types <- unique(list_dyad_types)
list_dyad_types <- na.omit(list_dyad_types)
cat(" Les types de dyades du reseau sont: ",list_dyad_types[1]," et ",list_dyad_types[2])
diameter.nodes <- get.diameter(graph)
V(graph)[diameter.nodes]$color <- "orange"
E(graph)$color<-"black"
E(graph, path=diameter.nodes)$color <- "orange"
plot(graph,
layout = layout,
vertex.label = gsub(" ", "\n", V(graph)$name),
vertex.shape = E(graph)$shape,
vertex.size = betweenness * 0.04,
vertex.frame.color = "gray",
vertex.label.color = "black",
vertex.label.cex = 0.8,
edge.width = edge_betweenness * 0.01,
edge.arrow.size = 0.5,
edge.color = E(graph)$color,
edge.lty = E(graph)$lty)
legend("topleft", legend = c("Node color:", as.character(color_vertices$revenu_sup_3000), NA, "Edge shape:", as.character(shapes_edges$shape)), pch = 19,
col = c(NA, color_vertices$color, NA, NA,NA), pt.cex = 5, cex = 2, bty = "n", ncol = 1)
legend("top", legend = "", cex = 2, bty = "n", ncol = 1,
title = "Graph of The people cited in the survey in LAB 8 with the diameter")
cat("The graph's density is: ",graph.density(graph))
cat("The graph's reciprocity is: ",reciprocity(graph))
cat("The graph's transitivity is: ",transitivity(graph))
# 4.a
data <- read.csv("BDD_Rescampus_cleaned.csv",header=T,sep=',')
t_m <- data.frame() # création d'un dataframe vide qui contiendra toutes les informations finales.
laboratoire <- unique(data$lab) # On récupère manière unique chaque labo
for (labo in 1:length(laboratoire)){
table_labo <- data[data$lab==laboratoire[labo],]
for (i in 1:nrow(table_labo)){
table_labo <- table_labo %>%
mutate(mean_doctorat = (sum(doctorat) - doctorat) / (n() - 1),
mean_revenu_sup_3000 = (sum(revenu_sup_3000) - revenu_sup_3000) / (n() - 1),
mean_femme = (sum(femme) - femme) / (n() - 1),
mean_age = (sum(age) - age) / (n() - 1),
mean_nb_HH = (sum(nb_HH) - nb_HH) / (n() - 1),
mean_recyclage_index = (sum(recyclage_index) - recyclage_index) / (n() - 1))
}
t_m <- rbind(t_m,table_labo)
}
manski <- lm(recyclage_index~.-identifiant-Q8A-Q8B-Q8C-Q8D-Q8E-Q8F-lab,data=t_m)
modele_manski <- lm(recyclage_index~doctorat+revenu_sup_3000+femme+age +nb_HH+mean_doctorat+
mean_revenu_sup_3000+ mean_femme+mean_age+mean_nb_HH+
mean_recyclage_index,data=t_m)
summary(modele_manski)
BDD_ResCampus <- read.csv("BDD_Rescampus_cleaned.csv",header=T,sep=',')
BDD_ResCampus<-as.data.frame(BDD_ResCampus)
G <- matrix(0,nrow=nrow(BDD_ResCampus),nrow(BDD_ResCampus))#adjacency matrix
for (j in 1:nrow(G)){ # for each individual
lstfr <- c(which(colnames(BDD_ResCampus)=="Q8A"):which(colnames(BDD_ResCampus)=="Q8F")) # unique identifiers for j's friends
for (k in lstfr){ # for each potential friendship relations
if (!is.na(BDD_ResCampus[j,k])){ # if named a friend
fr <- which(BDD_ResCampus$identifiant==BDD_ResCampus[j,k]) # find friend k' row number
if (length(fr)>0){ # if friend k is found
G[j,fr[1]] <- 1 # add link
}
}
}
}
diag(G) <- 0 # zero on diagonal
G<- G/rowSums(G)
G<-ifelse(is.nan(G),0,G) #of course dividing by zero yields NaN
modele_bramoulle <- iv_robust(recyclage_index~doctorat+revenu_sup_3000+femme+age +nb_HH
|
mean_doctorat+
mean_revenu_sup_3000+ mean_femme+mean_age+mean_nb_HH+
mean_recyclage_index +lab,
data=t_m,
clusters = lab)
summary(modele_bramoulle)
matrice_X <- data |> select(c("doctorat","revenu_sup_3000","femme",
"age","nb_HH")) |> as.matrix()
matrice_Y <- data |> select(c("recyclage_index")) |> as.matrix()
GX <- G %*% matrice_X
colnames(GX) <- c("G_doctorat","G_revenu_sup_3000","G_femme","G_age","G_nb_HH")
G2X <- G %*% G %*% matrice_X
colnames(G2X) <- c("G2_doctorat","G2_revenu_sup_3000","G2_femme","G2_age","G2_nb_HH")
GY <- G %*% matrice_Y
colnames(GY) <- c("G_recyclage_index")
X <- data |> select(c("doctorat","revenu_sup_3000","femme",
"age","nb_HH"))
data_bramoulle_fix <- as.data.frame(cbind("recyclage_index"=data$recyclage_index,X,GX,G2X,GY))
modele_bramoulle_fix <- iv_robust(recyclage_index~ doctorat+revenu_sup_3000+femme+ age + nb_HH +
G_doctorat+G_revenu_sup_3000+G_femme+ G_age + G_nb_HH
+ G_recyclage_index
|
doctorat+revenu_sup_3000+femme+ age + nb_HH +
G_doctorat+G_revenu_sup_3000+G_femme+ G_age + G_nb_HH+
G2_doctorat+G2_revenu_sup_3000+G2_femme+ G2_age + G2_nb_HH,
data=data_bramoulle_fix)
summary(modele_bramoulle_fix)
