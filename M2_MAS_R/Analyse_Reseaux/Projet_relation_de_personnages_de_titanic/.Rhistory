female_name_survived <- female_survived[c("Name_passenger", "Name_Target")]
#  Tous les prénoms de la base
id <- c(female_name_survided$Name_passenger,female_name_survided$Name_Target)
# Prénoms uniques sans doublons
id_unique <- unique(id)
# Mapping entre les prénoms et les identifiants numériques uniques
firstname_to_id <- as.numeric(factor(id, levels = id_unique))
# Graphe avec les identifiants numériques uniques
g <- make_empty_graph(n = length(id_unique), directed = TRUE)
# Récupération des couples
liaison <- c()
for (i in 1:nrow(female_name_survived)){
paire <- c(female_name_survided$Name_passenger[i],female_name_survided$Name_Target[i])
liaison <- c(liaison,paire)
}
edges <- match(liaison, id_unique)
g <- add.edges(g, edges)
plot(g)
passager_factor <- reactable(data.frame(passager = id,id = firstname_to_id))
passager_factor
degree(g)
diameter(g)
diameter.nodes <- get.diameter(g)
V(g)[diameter.nodes]$color <- "red"
E(g)$color<-"black"
E(g, path=diameter.nodes)$color <- "red"
plot(g)
graph.density(g)
mean(degree(g, mode="all"))
median(degree(g, mode="all"))
reciprocity(g)
transitivity(g)
distances(g) #distance entre chaque sommet
rowSums(distances(g))
mean_distance(g)
closeness(g)
1/rowSums(distances(g))
betweenness(g)
mean(betweenness(g))
male_survided <- na.omit(union_target[union_target$Sex_Passenger=="male" & union_target$Survided_Passenger==1 & union_target$Survided_Target==1,])
male_survided_name <- male_survided[c("Name_passenger", "Name_Target","Survided_Passenger","Survided_Target")]
id2 <- c(male_survided_name$Name_passenger,male_survided_name$Name_Target)
# Créer un dataframe de prénoms uniques
id_unique2 <- unique(id2)
# Créer un mapping entre les prénoms et les identifiants numériques uniques
firstname_to_id2 <- as.numeric(factor(id2, levels = id_unique2))
# Créer un graphe avec les identifiants numériques uniques
g2 <- make_empty_graph(n = length(id_unique2), directed = TRUE)
# Récupération des couples
liaison2 <- c()
for (i in 1:nrow(male_survided_name)){
paire2 <- c(male_survided_name$Name_passenger[i],male_survided_name$Name_Target[i])
liaison2 <- c(liaison2,paire2)
}
edges2 <- match(liaison2, id_unique2)
g2 <- add.edges(g2, edges2)
plot(g2)
survided <- na.omit(union_target[union_target$Survided_Passenger==1,])
survided_name <- survided[c("Name_passenger", "Name_Target","Survided_Passenger","Survided_Target")]
id_seconde_classe <- c(survided_name$Name_passenger,survided_name$Name_Target)
# Créer un dataframe de prénoms uniques
id_unique_seconde_classe <- unique(id_seconde_classe)
# Créer un mapping entre les prénoms et les identifiants numériques uniques
firstname_to_id_seconde_classe <- as.numeric(factor(id_seconde_classe, levels = id_unique_seconde_classe))
# Créer un graphe avec les identifiants numériques uniques
g_sc <- make_empty_graph(n = length(id_unique_seconde_classe), directed = TRUE)
# Récupération des couples
liaison_seconde_classe <- c()
for (i in 1:nrow(survided_name)){
paire_seconde_classe <- c(survided_name$Name_passenger[i],survided_name$Name_Target[i])
liaison_seconde_classe <- c(liaison_seconde_classe,paire_seconde_classe)
}
edges_seconde_classe <- match(liaison_seconde_classe, id_unique_seconde_classe)
g_sc<- add.edges(g_sc, edges_seconde_classe)
node_colors <- ifelse(survided_name$Survided_Target == 0, "green", "red")
# Plot le graphe en utilisant les couleurs définies
plot(g_sc, vertex.color = node_colors)
# plot(g_sc)
female_survived <- na.omit(union_target[union_target$Sex_Passenger=="female" & union_target$Survided_Passenger==1 ,])
female_name_survived <- female_survived[c("Name_passenger", "Name_Target")]
female_survived <- na.omit(union_target[union_target$Sex_Passenger=="female" & union_target$Survided_Passenger==1 ,])
female_name_survived <- female_survived[c("Name_passenger", "Name_Target")]
#  Tous les prénoms de la base
id <- c(female_name_survided$Name_passenger,female_name_survided$Name_Target)
# Prénoms uniques sans doublons
id_unique <- unique(id)
# Mapping entre les prénoms et les identifiants numériques uniques
firstname_to_id <- as.numeric(factor(id, levels = id_unique))
# Graphe avec les identifiants numériques uniques
g <- make_empty_graph(n = length(id_unique), directed = TRUE)
# Récupération des couples
liaison <- c()
for (i in 1:nrow(female_name_survived)){
paire <- c(female_name_survided$Name_passenger[i],female_name_survided$Name_Target[i])
liaison <- c(liaison,paire)
}
edges <- match(liaison, id_unique)
g <- add.edges(g, edges)
#  Tous les prénoms de la base
id <- c(female_name_survided$Name_passenger,female_name_survided$Name_Target)
# Prénoms uniques sans doublons
id_unique <- unique(id)
# Mapping entre les prénoms et les identifiants numériques uniques
firstname_to_id <- as.numeric(factor(id, levels = id_unique))
# Graphe avec les identifiants numériques uniques
g <- make_empty_graph(n = length(id_unique), directed = TRUE)
# Récupération des couples
liaison <- c()
for (i in 1:nrow(female_name_survived)){
paire <- c(female_name_survided$Name_passenger[i],female_name_survided$Name_Target[i])
liaison <- c(liaison,paire)
}
edges <- match(liaison, id_unique)
g <- add.edges(g, edges)
# Graphe avec les identifiants numériques uniques
g <- make_empty_graph(n = length(id_unique), directed = TRUE)
# Récupération des couples
liaison <- c()
for (i in 1:nrow(female_name_survived)){
paire <- c(female_name_survided$Name_passenger[i],female_name_survided$Name_Target[i])
liaison <- c(liaison,paire)
}
edges <- match(liaison, id_unique)
g <- add.edges(g, edges)
female_survived <- na.omit(union_target[union_target$Sex_Passenger=="female" & union_target$Survided_Passenger==1 & union_target$Survided_Target==1 ,])
female_name_survived <- female_survived[c("Name_passenger", "Name_Target")]
#  Tous les prénoms de la base
id <- c(female_name_survided$Name_passenger,female_name_survided$Name_Target)
# Prénoms uniques sans doublons
id_unique <- unique(id)
# Mapping entre les prénoms et les identifiants numériques uniques
firstname_to_id <- as.numeric(factor(id, levels = id_unique))
# Graphe avec les identifiants numériques uniques
g <- make_empty_graph(n = length(id_unique), directed = TRUE)
# Récupération des couples
liaison <- c()
for (i in 1:nrow(female_name_survived)){
paire <- c(female_name_survided$Name_passenger[i],female_name_survided$Name_Target[i])
liaison <- c(liaison,paire)
}
edges <- match(liaison, id_unique)
g <- add.edges(g, edges)
plot(g)
female_survived <- na.omit(union_target[union_target$Sex_Passenger=="female"  ,])
female_name_survived <- female_survived[c("Name_passenger", "Name_Target")]
#  Tous les prénoms de la base
id <- c(female_name_survided$Name_passenger,female_name_survided$Name_Target)
# Prénoms uniques sans doublons
id_unique <- unique(id)
# Mapping entre les prénoms et les identifiants numériques uniques
firstname_to_id <- as.numeric(factor(id, levels = id_unique))
# Graphe avec les identifiants numériques uniques
g <- make_empty_graph(n = length(id_unique), directed = TRUE)
# Récupération des couples
liaison <- c()
for (i in 1:nrow(female_name_survived)){
paire <- c(female_name_survided$Name_passenger[i],female_name_survided$Name_Target[i])
liaison <- c(liaison,paire)
}
edges <- match(liaison, id_unique)
g <- add.edges(g, edges)
View(female_name_survived)
id_unique
firstname_to_id
View(female_survived)
View(female_name_survived)
View(female_survided)
edges
female_survived <- na.omit(union_target[union_target$Sex_Passenger=="female"  ,])
female_name_survived <- female_survived[c("Name_passenger", "Name_Target")]
#  Tous les prénoms de la base
id <- c(female_name_survided$Name_passenger,female_name_survided$Name_Target)
# Prénoms uniques sans doublons
id_unique <- unique(id)
# Mapping entre les prénoms et les identifiants numériques uniques
firstname_to_id <- as.numeric(factor(id, levels = id_unique))
# Graphe avec les identifiants numériques uniques
g <- make_empty_graph(n = length(id_unique), directed = TRUE)
# Récupération des couples
liaison <- c()
for (i in 1:nrow(female_name_survived)){
paire <- c(female_name_survided$Name_passenger[i],female_name_survided$Name_Target[i])
liaison <- c(liaison,paire)
}
edges <- match(liaison, id_unique)
g <- add.edges(g, edges)
liaison
View(female_name_survived)
nrow(female_name_survived)
female_name_survided$Name_passenger[49]
View(female_name_survived)
female_survived <- na.omit(union_target[union_target$Sex_Passenger=="female"  ,])
female_name_survived <- female_survived[c("Name_passenger", "Name_Target")]
female_name_survived %>% as.data.frame(row.names = 1:nrow(.))
#  Tous les prénoms de la base
id <- c(female_name_survided$Name_passenger,female_name_survided$Name_Target)
# Prénoms uniques sans doublons
id_unique <- unique(id)
# Mapping entre les prénoms et les identifiants numériques uniques
firstname_to_id <- as.numeric(factor(id, levels = id_unique))
# Graphe avec les identifiants numériques uniques
g <- make_empty_graph(n = length(id_unique), directed = TRUE)
# Récupération des couples
liaison <- c()
for (i in 1:nrow(female_name_survived)){
paire <- c(female_name_survided$Name_passenger[i],female_name_survided$Name_Target[i])
liaison <- c(liaison,paire)
}
edges <- match(liaison, id_unique)
g <- add.edges(g, edges)
edges
View(female_name_survived)
female_survived <- na.omit(union_target[union_target$Sex_Passenger=="female"  ,])
female_name_survived <- female_survived[c("Name_passenger", "Name_Target")]
female_name_survived |> as.data.frame(row.names = 1:nrow(.))
female_survived <- na.omit(union_target[union_target$Sex_Passenger=="female"  ,])
female_name_survived <- female_survived[c("Name_passenger", "Name_Target")]
female_name_survived |> as.data.frame(row.names = 1:nrow())
female_survived <- na.omit(union_target[union_target$Sex_Passenger=="female"  ,])
female_name_survived <- female_survived[c("Name_passenger", "Name_Target")]
female_name_survived <- female_name_survided |> as.data.frame(row.names = 1:nrow(female_name_survided))
View(female_name_survived)
female_survived <- na.omit(union_target[union_target$Sex_Passenger=="female"  ,])
female_name_survived <- female_survived[c("Name_passenger", "Name_Target")]
female_name_survived <- female_name_survided |> as.data.frame(row.names = 1:nrow(female_name_survided))
View(female_survived)
knitr::opts_chunk$set(echo = TRUE)
# install.packages("reactable")
library(tidyverse)
library(igraph)
library(reactable)
library(ggplot2)
data <- read.csv("titanic_relationships.csv",sep=",")
dim(data)
sum(is.na(data))
# Transformation des variables Sex, Pclass et Survived charactères numériques en factor
data$Survived <- as.factor(data$Survived)
data$Sex <- as.factor(data$Sex)
data$Pclass <- as.factor(data$Pclass)
summary(data)
ggplot(data, aes(x="", y="", fill=Sex)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
ggplot(data, aes(x = Pclass, fill = Sex)) +
geom_bar(position = "dodge")
ggplot(data, aes(x=Age)) +
geom_histogram( binwidth=3, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
ggtitle("Bin size = 3")
data$Survived <- as.character(data$Survived)
ggplot(data, aes(x = Pclass, fill = Survived)) +
geom_bar(position = "dodge")
data <- data[is.na(data$Age)==F,]
data <- data[which(data$Siblings!="" | data$Parents!="" | !is.na(data$Spouse) | data$Children!=""),]
data_seconde <- data[data$Pclass==2,]
union_characters <- data_seconde |> select(-c("Spouse","Siblings","Parents","Children"))
union_target <- data_seconde |> separate_rows(Siblings,sep="/") |> select(c("PassengerId","Name","Siblings"))
union_target <- union_target[which(union_target$Siblings != ""),]
type <- rep("sibling",nrow(union_target))
union_target <- cbind(union_target,type)
colnames(union_target) <- c("id_Passenger","Name_passenger","Target","Type")
relation_parent <- data_seconde |> separate_rows(Parents,sep="/") |> select(c("PassengerId","Name","Parents"))
relation_parent <- relation_parent[which(relation_parent$Parents != ""),]
type <- rep("parents",nrow(relation_parent))
relation_parent <- cbind(relation_parent,type)
colnames(relation_parent) <- c("id_Passenger","Name_passenger","Target","Type")
relation_spouse <- data_seconde |> select(c("PassengerId","Name","Spouse"))
relation_spouse <- relation_spouse[which(!is.na(relation_spouse$Spouse)),]
type <- rep("spouse",nrow(relation_spouse))
relation_spouse <- cbind(relation_spouse,type)
colnames(relation_spouse) <- c("id_Passenger","Name_passenger","Target","Type")
relation_child <- data_seconde |> separate_rows(Children,sep="/") |> select(c("PassengerId","Name","Children"))
relation_child <- relation_child[which(relation_child$Children != ""),]
type <- rep("children",nrow(relation_child))
relation_child <- cbind(relation_child,type)
colnames(relation_child) <- c("id_Passenger","Name_passenger","Target","Type")
union_target <- rbind(union_target,relation_parent,relation_spouse,relation_child)
union_target <- union_target |> arrange(union_target$Source)
data_add_seconde <- data_seconde[c('PassengerId','Pclass','Sex', 'Survived')]
union_target <- left_join(union_target,data_add_seconde ,by = c("id_Passenger" = "PassengerId"))
# Changements des noms de colonnes
colnames(union_target)[5] <- "Pclass_Passenger"
colnames(union_target)[6] <- "Sex_Passenger"
colnames(union_target)[7] <- "Survided_Passenger"
data_add_target_seconde <- data_seconde[c('PassengerId','Pclass','Sex', 'Survived', 'Name')]
data_add_target_seconde$PassengerId <- as.character(data_add_target_seconde$PassengerId)
union_target <- left_join(union_target,data_add_target_seconde ,by = c("Target" = "PassengerId"))
colnames(union_target)[8] <- "Pclass_Target"
colnames(union_target)[9] <- "Sex_Target"
colnames(union_target)[10] <- "Survided_Target"
colnames(union_target)[11] <- "Name_Target"
female_survived <- na.omit(union_target[union_target$Sex_Passenger=="female" & union_target$Survided_Passenger==1 & union_target$Survided_Target==1,])
female_name_survived <- female_survived[c("Name_passenger", "Name_Target")]
#  Tous les prénoms de la base
id <- c(female_name_survided$Name_passenger,female_name_survided$Name_Target)
# Prénoms uniques sans doublons
id_unique <- unique(id)
# Mapping entre les prénoms et les identifiants numériques uniques
firstname_to_id <- as.numeric(factor(id, levels = id_unique))
# Graphe avec les identifiants numériques uniques
g <- make_empty_graph(n = length(id_unique), directed = TRUE)
# Récupération des couples
liaison <- c()
for (i in 1:nrow(female_name_survived)){
paire <- c(female_name_survided$Name_passenger[i],female_name_survided$Name_Target[i])
liaison <- c(liaison,paire)
}
edges <- match(liaison, id_unique)
g <- add.edges(g, edges)
plot(g)
passager_factor <- reactable(data.frame(passager = id,id = firstname_to_id))
passager_factor
degree(g)
diameter(g)
diameter.nodes <- get.diameter(g)
V(g)[diameter.nodes]$color <- "red"
E(g)$color<-"black"
E(g, path=diameter.nodes)$color <- "red"
plot(g)
graph.density(g)
mean(degree(g, mode="all"))
median(degree(g, mode="all"))
reciprocity(g)
transitivity(g)
distances(g) #distance entre chaque sommet
rowSums(distances(g))
mean_distance(g)
closeness(g)
1/rowSums(distances(g))
betweenness(g)
mean(betweenness(g))
male_survided <- na.omit(union_target[union_target$Sex_Passenger=="male" & union_target$Survided_Passenger==1 & union_target$Survided_Target==1,])
male_survided_name <- male_survided[c("Name_passenger", "Name_Target","Survided_Passenger","Survided_Target")]
id2 <- c(male_survided_name$Name_passenger,male_survided_name$Name_Target)
# Créer un dataframe de prénoms uniques
id_unique2 <- unique(id2)
# Créer un mapping entre les prénoms et les identifiants numériques uniques
firstname_to_id2 <- as.numeric(factor(id2, levels = id_unique2))
# Créer un graphe avec les identifiants numériques uniques
g2 <- make_empty_graph(n = length(id_unique2), directed = TRUE)
# Récupération des couples
liaison2 <- c()
for (i in 1:nrow(male_survided_name)){
paire2 <- c(male_survided_name$Name_passenger[i],male_survided_name$Name_Target[i])
liaison2 <- c(liaison2,paire2)
}
edges2 <- match(liaison2, id_unique2)
g2 <- add.edges(g2, edges2)
plot(g2)
survided <- na.omit(union_target[union_target$Survided_Passenger==1,])
survided_name <- survided[c("Name_passenger", "Name_Target","Survided_Passenger","Survided_Target")]
id_seconde_classe <- c(survided_name$Name_passenger,survided_name$Name_Target)
# Créer un dataframe de prénoms uniques
id_unique_seconde_classe <- unique(id_seconde_classe)
# Créer un mapping entre les prénoms et les identifiants numériques uniques
firstname_to_id_seconde_classe <- as.numeric(factor(id_seconde_classe, levels = id_unique_seconde_classe))
# Créer un graphe avec les identifiants numériques uniques
g_sc <- make_empty_graph(n = length(id_unique_seconde_classe), directed = TRUE)
# Récupération des couples
liaison_seconde_classe <- c()
for (i in 1:nrow(survided_name)){
paire_seconde_classe <- c(survided_name$Name_passenger[i],survided_name$Name_Target[i])
liaison_seconde_classe <- c(liaison_seconde_classe,paire_seconde_classe)
}
edges_seconde_classe <- match(liaison_seconde_classe, id_unique_seconde_classe)
g_sc<- add.edges(g_sc, edges_seconde_classe)
node_colors <- ifelse(survided_name$Survided_Target == 0, "green", "red")
# Plot le graphe en utilisant les couleurs définies
plot(g_sc, vertex.color = node_colors)
# plot(g_sc)
knitr::opts_chunk$set(echo = TRUE)
# install.packages("reactable")
library(tidyverse)
library(igraph)
library(reactable)
library(ggplot2)
data <- read.csv("titanic_relationships.csv",sep=",")
dim(data)
sum(is.na(data))
# Transformation des variables Sex, Pclass et Survived charactères numériques en factor
data$Survived <- as.factor(data$Survived)
data$Sex <- as.factor(data$Sex)
data$Pclass <- as.factor(data$Pclass)
summary(data)
ggplot(data, aes(x="", y="", fill=Sex)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
ggplot(data, aes(x = Pclass, fill = Sex)) +
geom_bar(position = "dodge")
ggplot(data, aes(x=Age)) +
geom_histogram( binwidth=3, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
ggtitle("Bin size = 3")
data$Survived <- as.character(data$Survived)
ggplot(data, aes(x = Pclass, fill = Survived)) +
geom_bar(position = "dodge")
data <- data[is.na(data$Age)==F,]
data <- data[which(data$Siblings!="" | data$Parents!="" | !is.na(data$Spouse) | data$Children!=""),]
data_seconde <- data[data$Pclass==2,]
union_characters <- data_seconde |> select(-c("Spouse","Siblings","Parents","Children"))
union_target <- data_seconde |> separate_rows(Siblings,sep="/") |> select(c("PassengerId","Name","Siblings"))
union_target <- union_target[which(union_target$Siblings != ""),]
type <- rep("sibling",nrow(union_target))
union_target <- cbind(union_target,type)
colnames(union_target) <- c("id_Passenger","Name_passenger","Target","Type")
relation_parent <- data_seconde |> separate_rows(Parents,sep="/") |> select(c("PassengerId","Name","Parents"))
relation_parent <- relation_parent[which(relation_parent$Parents != ""),]
type <- rep("parents",nrow(relation_parent))
relation_parent <- cbind(relation_parent,type)
colnames(relation_parent) <- c("id_Passenger","Name_passenger","Target","Type")
relation_spouse <- data_seconde |> select(c("PassengerId","Name","Spouse"))
relation_spouse <- relation_spouse[which(!is.na(relation_spouse$Spouse)),]
type <- rep("spouse",nrow(relation_spouse))
relation_spouse <- cbind(relation_spouse,type)
colnames(relation_spouse) <- c("id_Passenger","Name_passenger","Target","Type")
relation_child <- data_seconde |> separate_rows(Children,sep="/") |> select(c("PassengerId","Name","Children"))
relation_child <- relation_child[which(relation_child$Children != ""),]
type <- rep("children",nrow(relation_child))
relation_child <- cbind(relation_child,type)
colnames(relation_child) <- c("id_Passenger","Name_passenger","Target","Type")
union_target <- rbind(union_target,relation_parent,relation_spouse,relation_child)
union_target <- union_target |> arrange(union_target$Source)
data_add_seconde <- data_seconde[c('PassengerId','Pclass','Sex', 'Survived')]
union_target <- left_join(union_target,data_add_seconde ,by = c("id_Passenger" = "PassengerId"))
# Changements des noms de colonnes
colnames(union_target)[5] <- "Pclass_Passenger"
colnames(union_target)[6] <- "Sex_Passenger"
colnames(union_target)[7] <- "Survided_Passenger"
data_add_target_seconde <- data_seconde[c('PassengerId','Pclass','Sex', 'Survived', 'Name')]
data_add_target_seconde$PassengerId <- as.character(data_add_target_seconde$PassengerId)
union_target <- left_join(union_target,data_add_target_seconde ,by = c("Target" = "PassengerId"))
colnames(union_target)[8] <- "Pclass_Target"
colnames(union_target)[9] <- "Sex_Target"
colnames(union_target)[10] <- "Survided_Target"
colnames(union_target)[11] <- "Name_Target"
female_survived <- na.omit(union_target[union_target$Sex_Passenger=="female" & union_target$Survided_Passenger==1 & union_target$Survided_Target==1,])
female_name_survided <- female_survived[c("Name_passenger", "Name_Target")]
#  Tous les prénoms de la base
id <- c(female_name_survided$Name_passenger,female_name_survided$Name_Target)
# Prénoms uniques sans doublons
id_unique <- unique(id)
# Mapping entre les prénoms et les identifiants numériques uniques
firstname_to_id <- as.numeric(factor(id, levels = id_unique))
# Graphe avec les identifiants numériques uniques
g <- make_empty_graph(n = length(id_unique), directed = TRUE)
# Récupération des couples
liaison <- c()
for (i in 1:nrow(female_name_survived)){
paire <- c(female_name_survided$Name_passenger[i],female_name_survided$Name_Target[i])
liaison <- c(liaison,paire)
}
edges <- match(liaison, id_unique)
g <- add.edges(g, edges)
plot(g)
passager_factor <- reactable(data.frame(passager = id,id = firstname_to_id))
passager_factor
degree(g)
diameter(g)
diameter.nodes <- get.diameter(g)
V(g)[diameter.nodes]$color <- "red"
E(g)$color<-"black"
E(g, path=diameter.nodes)$color <- "red"
plot(g)
graph.density(g)
mean(degree(g, mode="all"))
median(degree(g, mode="all"))
reciprocity(g)
transitivity(g)
distances(g) #distance entre chaque sommet
rowSums(distances(g))
mean_distance(g)
closeness(g)
1/rowSums(distances(g))
betweenness(g)
mean(betweenness(g))
male_survided <- na.omit(union_target[union_target$Sex_Passenger=="male" & union_target$Survided_Passenger==1 & union_target$Survided_Target==1,])
male_survided_name <- male_survided[c("Name_passenger", "Name_Target","Survided_Passenger","Survided_Target")]
id2 <- c(male_survided_name$Name_passenger,male_survided_name$Name_Target)
# Créer un dataframe de prénoms uniques
id_unique2 <- unique(id2)
# Créer un mapping entre les prénoms et les identifiants numériques uniques
firstname_to_id2 <- as.numeric(factor(id2, levels = id_unique2))
# Créer un graphe avec les identifiants numériques uniques
g2 <- make_empty_graph(n = length(id_unique2), directed = TRUE)
# Récupération des couples
liaison2 <- c()
for (i in 1:nrow(male_survided_name)){
paire2 <- c(male_survided_name$Name_passenger[i],male_survided_name$Name_Target[i])
liaison2 <- c(liaison2,paire2)
}
edges2 <- match(liaison2, id_unique2)
g2 <- add.edges(g2, edges2)
plot(g2)
survided <- na.omit(union_target[union_target$Survided_Passenger==1,])
survided_name <- survided[c("Name_passenger", "Name_Target","Survided_Passenger","Survided_Target")]
id_seconde_classe <- c(survided_name$Name_passenger,survided_name$Name_Target)
# Créer un dataframe de prénoms uniques
id_unique_seconde_classe <- unique(id_seconde_classe)
# Créer un mapping entre les prénoms et les identifiants numériques uniques
firstname_to_id_seconde_classe <- as.numeric(factor(id_seconde_classe, levels = id_unique_seconde_classe))
# Créer un graphe avec les identifiants numériques uniques
g_sc <- make_empty_graph(n = length(id_unique_seconde_classe), directed = TRUE)
# Récupération des couples
liaison_seconde_classe <- c()
for (i in 1:nrow(survided_name)){
paire_seconde_classe <- c(survided_name$Name_passenger[i],survided_name$Name_Target[i])
liaison_seconde_classe <- c(liaison_seconde_classe,paire_seconde_classe)
}
edges_seconde_classe <- match(liaison_seconde_classe, id_unique_seconde_classe)
g_sc<- add.edges(g_sc, edges_seconde_classe)
node_colors <- ifelse(survided_name$Survided_Target == 0, "green", "red")
# Plot le graphe en utilisant les couleurs définies
plot(g_sc, vertex.color = node_colors)
# plot(g_sc)
