#Graphes fondés sur les plus proches voisins
Sy8_nb <- knn2nb(knearneigh(coords,k=1),row.names=IDs)
Sy9_nb <- knn2nb(knearneigh(coords,k=2),row.names=IDs)
Sy10_nb <- knn2nb(knearneigh(coords,k=3),row.names=IDs)
plot(quartiers_sp, border='lightgray')
plot(Sy8_nb,coordinates(quartiers_sp),add=TRUE,col='red')
#Etude de la distance moyenne du voisin le plus proche
dsts <- unlist(nbdists(Sy8_nb,coords))
summary(dsts)
## Min. 1st Qu. Median Mean 3rd Qu. Max.
## 820 1188 1678 1707 2016 3412
max_1nn <- max(dsts)
#Calcul et représentation des voisins à la distance minimale
Sy11_nb <- dnearneigh(coords, d1=0, d2=max_1nn, row.names=IDs)
plot(quartiers_sp, border='lightgray')
plot(Sy11_nb,coordinates(quartiers_sp),add=TRUE,col='red')
#Le fichier en entrée est un fichier SpatialPolygons
#Extraction de la liste des voisins au sens QUEEN (par défaut)
quartiers_sp.nb<- poly2nb(quartiers_sp)
#Extraction de la liste des voisins au sens ROOK
quartiers_sp.nb.ROOK <- poly2nb(quartiers_sp, queen=FALSE)
#Représentation visuelle des voisins :
plot(quartiers_sp, border='lightgray')
plot(quartiers_sp.nb, coordinates(quartiers_sp),add=TRUE,col='red')
plot(quartiers_sp.nb.ROOK, coordinates(quartiers_sp),add=TRUE,col='blue')
library(rgdal) #Pour importer les fichiers MIF/MID
library(rgdal) #Pour importer les fichiers MIF/MID
#Graphe de la sphère d'influence
Sy5_nb <- graph2nb(soi.graph(Sy4_nb,coords),row.names=IDs)
install.packages("dbscan")
#Graphe de la sphère d'influence
Sy5_nb <- graph2nb(soi.graph(Sy4_nb,coords),row.names=IDs)
#Voisins fondés sur la notion de graphe
#Le fichier en entrée est une matrice de coordonnées géographiques ou un objet de type SpatialPoints
coords <- coordinates(quartiers_sp)
IDs <- row.names(as(quartiers_sp,"data.frame"))
#Triangulation de Delaunay
Sy4_nb <- tri2nb(coords, row.names=IDs)
plot(quartiers_sp, border='lightgray')
plot(Sy4_nb,coordinates(quartiers_sp),add=TRUE,col='red')
#Graphe de la sphère d'influence
Sy5_nb <- graph2nb(soi.graph(Sy4_nb,coords),row.names=IDs)
plot(quartiers_sp, border='lightgray')
plot(Sy5_nb,coordinates(quartiers_sp),add=TRUE,col='red')
#Graphe de Gabriel
Sy6_nb <- graph2nb(gabrielneigh(coords), row.names=IDs)
plot(quartiers_sp, border='lightgray')
plot(Sy6_nb,coordinates(quartiers_sp),add=TRUE,col='red')
#Graphe des voisins relatifs
Sy7_nb <- graph2nb(relativeneigh(coords), row.names=IDs)
plot(quartiers_sp, border='lightgray')
plot(Sy7_nb,coordinates(quartiers_sp),add=TRUE,col='red')
#Graphes fondés sur les plus proches voisins
Sy8_nb <- knn2nb(knearneigh(coords,k=1),row.names=IDs)
# on cherche le plus proche voisin
Sy9_nb <- knn2nb(knearneigh(coords,k=2),row.names=IDs)
Sy10_nb <- knn2nb(knearneigh(coords,k=3),row.names=IDs)
plot(quartiers_sp, border='lightgray')
plot(Sy8_nb,coordinates(quartiers_sp),add=TRUE,col='red')
#Etude de la distance moyenne du voisin le plus proche
dsts <- unlist(nbdists(Sy8_nb,coords))
summary(dsts)
## Min. 1st Qu. Median Mean 3rd Qu. Max.
## 820 1188 1678 1707 2016 3412
max_1nn <- max(dsts)
#Calcul et représentation des voisins à la distance minimale
Sy11_nb <- dnearneigh(coords, d1=0, d2=max_1nn, row.names=IDs)
plot(quartiers_sp, border='lightgray')
plot(Sy11_nb,coordinates(quartiers_sp),add=TRUE,col='red')
#Le fichier en entrée est un fichier SpatialPolygons
#Extraction de la liste des voisins au sens QUEEN (par défaut)
quartiers_sp.nb<- poly2nb(quartiers_sp)
#Extraction de la liste des voisins au sens ROOK
quartiers_sp.nb.ROOK <- poly2nb(quartiers_sp, queen=FALSE)
#Représentation visuelle des voisins :
plot(quartiers_sp, border='lightgray')
plot(quartiers_sp.nb, coordinates(quartiers_sp),add=TRUE,col='red')
plot(quartiers_sp.nb.ROOK, coordinates(quartiers_sp),add=TRUE,col='blue')
#Matrice basée sur la contiguïté
#La fonction nb2listw convertit tout objet de type "nb" en une #liste de poids
quartiers_sp.lw <- nb2listw(quartiers_sp.nb)
#Matrice fondée sur la distance
#La fonction mat2listw convertit une matrice en une liste de poids
library(fields) #pour calculer la distance entre deux points
coords <- coordinates(quartiers_sp)
distance <- rdist(coords,coords)
diag(distance) <- 0
distance[distance >=100000] <- 0
#le poids décroit comme le carré de la distance, dans un rayon de 100km
dist <- 1.e12 %/% (distance*distance)
dist[dist >=1.e15] <- 0
dist.w <- mat2listw(dist,row.names=NULL)
#L'option style permet de définir le type de normalisation
quartiers_sp.lw <- nb2listw(quartiers_sp.nb,zero.policy=TRUE, style="W")
names(quartiers_sp.lw)
## [1] "style" "neighbours" "weights"
summary(unlist(quartiers_sp.lw$weights))
## Min. 1st Qu. Median Mean 3rd Qu. Max.
## 0.1250 0.1667 0.1833 0.1961 0.2500 0.3333
knitr::opts_chunk$set(echo = TRUE, warning = NA)
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(sf)
library(readxl)
library(tidyverse)
library(ggplot2)
library(leaflet)
# Lecture du fichier shapefile pour le fond de carte
shapefile <- st_read("dpt")
# Charger les données de population
elections_data <- read_excel("resultats-par-niveau-dpt-t1-france-entiere.xlsx")
elections_data$`Libelle du departement` <- toupper(elections_data$`Libelle du departement`)
# Joindre les données de la base de données à la couche de formes
sf_votes <- shapefile |>
select(NOM_DEPT, geometry) |>
left_join(elections_data[-c(97:107),], by = c("NOM_DEPT" = "Libelle du departement"))
# Creation des valeurs discretes et des classes
bins <- c(0, 30, 60, 90, 120, 150) * 10000
sf_votes$class <- cut(sf_votes$Votants, breaks = bins, dig.lab = 5)
# Palette
pal <- hcl.colors(5, "Fall", rev = TRUE, alpha = 0.7)
# Créer la carte choroplèthe
ggplot() +
geom_sf(data =  sf_votes, aes(fill = class), color=NA) +
# Labels
labs(
title = "Elections présidentielles 2022 en France",
subtitle = "Nombre de votants par département",
caption = "Données: data.gouv.fr",
fill = "Votes"
) +
# Personnalisation des couleurs
scale_fill_manual(values = pal,
drop = FALSE,
na.value = "grey80",
# Légende des classes
guide = guide_legend(direction = "horizontal",
nrow = 1,
label.position = "bottom"))+
# Theme
theme_void() +
theme(plot.caption = element_text(size = 7),
legend.position = "bottom")
# Lecture du fichier shapefile pour le fond de carte
shapefile <- st_read("dpt")
# Charger les données de population
elections_data <- read_excel("resultats-par-niveau-dpt-t1-france-entiere.xlsx")
elections_data$`Libelle du departement` <- toupper(elections_data$`Libelle du departement`)
# Joindre les données de la base de données à la couche de formes
sf_votes <- shapefile |>
select(NOM_DEPT, geometry) |>
left_join(elections_data[-c(97:107),], by = c("NOM_DEPT" = "Libelle du departement"))
# Creation des valeurs discretes et des classes
bins <- c(0, 30, 60, 90, 120, 150) * 10000
sf_votes$class <- cut(sf_votes$Votants, breaks = bins, dig.lab = 5)
# Palette
pal <- hcl.colors(5, "Fall", rev = TRUE, alpha = 0.7)
# Créer la carte choroplèthe
ggplot() +
geom_sf(data =  sf_votes, aes(fill = class), color=NA) +
# Labels
labs(
title = "Elections présidentielles 2022 en France",
subtitle = "Nombre de votants par département",
caption = "Données: data.gouv.fr",
fill = "Votes"
) +
# Personnalisation des couleurs
scale_fill_manual(values = pal,
drop = FALSE,
na.value = "grey80",
# Légende des classes
guide = guide_legend(direction = "horizontal",
nrow = 1,
label.position = "bottom"))+
# Theme
theme_void() +
theme(plot.caption = element_text(size = 7),
legend.position = "bottom")
# récupérer des latitudes et longitudes d'un point dans le monde
mygeocode <- function(adresses){
# adresses est un vecteur contenant toutes les adresses sous forme de chaine de caracteres
nominatim_osm <- function(address = NULL){
## details: http://wiki.openstreetmap.org/wiki/Nominatim
## fonction nominatim_osm proposée par D.Kisler
if(suppressWarnings(is.null(address)))  return(data.frame())
tryCatch(
d <- jsonlite::fromJSON(
gsub('\\@addr\\@', gsub('\\s+', '\\%20', address),
'http://nominatim.openstreetmap.org/search/@addr@?format=json&addressdetails=0&limit=1')
), error = function(c) return(data.frame())
)
if(length(d) == 0) return(data.frame())
return(c(as.numeric(d$lon), as.numeric(d$lat)))
}
tableau <- t(sapply(adresses,nominatim_osm))
colnames(tableau) <- c("lon","lat")
return(tableau)
}
Fac_eco <- mygeocode("7 Place Hoche")
content <- paste(sep = "<br/>",
"<b><a href='https://www.univ-rennes.fr'>Université Rennes 1</a></b>",
"7 Place Hoche"
)
leaflet() |> addTiles() |>
addPopups(lng = Fac_eco[,1], lat = Fac_eco[,2], content,
options = popupOptions(closeButton = FALSE)) |>
addProviderTiles("Stamen.Toner") # carte en blanc et noir
coords <- coordinates(sf_votes)
View(sf_votes)
# Créer la carte choroplèthe
ggplot() +
geom_sf(data =  sf_votes, aes(fill = class), color=NA) +
# Labels
labs(
title = "Elections présidentielles 2022 en France",
subtitle = "Nombre de votants par département",
caption = "Données: data.gouv.fr",
fill = "Votes"
) +
# Personnalisation des couleurs
scale_fill_manual(values = pal,
drop = FALSE,
na.value = "grey80",
# Légende des classes
guide = guide_legend(direction = "horizontal",
nrow = 1,
label.position = "bottom"))+
# Theme
theme_void() +
theme(plot.caption = element_text(size = 7),
legend.position = "bottom")
class(sf_votes)
coordinates(sf_votes)
knitr::opts_chunk$set(echo = TRUE, warning = NA)
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(sf)
library(readxl)
library(tidyverse)
library(ggplot2)
library(leaflet)
library(rgdal) #Pour importer les fichiers MIF/MID
knitr::opts_chunk$set(echo = TRUE, warning = NA)
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(sf)
library(readxl)
library(tidyverse)
library(ggplot2)
library(leaflet)
library(maptools) #Pour importer les fichiers Shapefile
library(tripack) #pour calculer les voisins basés sur la distance
library(spdep)
sf::as_Spatial(sf_votes)
sf_votes1 <- sf::as_Spatial(sf_votes)
sf_votes1 <- sf::as_Spatial(sf_votes)
#Voisins fondés sur la notion de graphe
#Le fichier en entrée est une matrice de coordonnées géographiques ou un objet de type SpatialPoints
coords <- coordinates(sf_votes1)
IDs <- row.names(as(sf_votes1,"data.frame"))
#Triangulation de Delaunay
Sy4_nb <- tri2nb(coords, row.names=IDs)
plot(sf_votes1, border='lightgray')
plot(Sy4_nb,coordinates(sf_votes1),add=TRUE,col='red')
sf_votes1 <- sf::as_Spatial(sf_votes)
#Voisins fondés sur la notion de graphe
#Le fichier en entrée est une matrice de coordonnées géographiques ou un objet de type SpatialPoints
coords <- coordinates(sf_votes1)
IDs <- row.names(as(sf_votes1,"data.frame"))
#Triangulation de Delaunay
Sy4_nb <- tri2nb(coords, row.names=IDs)
plot(sf_votes1, border='lightgray')
plot(Sy4_nb,coordinates(sf_votes1),add=TRUE,col='red')
#Graphe de la sphère d'influence
Sy5_nb <- graph2nb(soi.graph(Sy4_nb,coords),row.names=IDs)
plot(sf_votes1, border='lightgray')
plot(Sy5_nb,coordinates(sf_votes1),add=TRUE,col='red')
#Graphe de Gabriel
Sy6_nb <- graph2nb(gabrielneigh(coords), row.names=IDs)
plot(sf_votes1, border='lightgray')
plot(Sy6_nb,coordinates(sf_votes1),add=TRUE,col='red')
#Graphe des voisins relatifs
Sy7_nb <- graph2nb(relativeneigh(coords), row.names=IDs)
plot(sf_votes1, border='lightgray')
plot(Sy7_nb,coordinates(sf_votes1),add=TRUE,col='red')
library(dplyr)
library(hflights) # données de la base aviation
library(ggplot2)
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Exercice 1 - Tidyverse
head(iris)
# Select variables
select(iris, Petal.Width, Species)
tab1 <- filter(iris, Species == c("virginica","versicolor"))
# Nombre de setosa
iris |>
filter(Species == "setosa") |>
summarise(nombre_setosa = n())
# Moyenne de la largeur des pétales
iris |>
filter(Species == "versicolor") |>
summarise(moy_versicolor = mean(Petal.Width))
# Ajout d'une nouvelle variable
mutate(iris, Sum_Petal = Petal.Width + Sepal.Width)
# Moyenne et variance par catégorie d'espèces
summarise(iris, moy_virginica = mean(Sepal.Length))
str(hflights)
# Sélectionner les variables qui se situent entre Origin et Cancelled de différentes façons
hflights |> select(Dest,Distance,TaxiIn,TaxiOut)
select(hflights, matches("D.*st"), starts_with("Taxi"))
# Sélectionner les variables DepTime, ArrTime, ActualElapsedTime, AirTime, ArrDelay et DepDelay
hflights |> select(ends_with("Time"),ends_with("Delay"))
# Ajouter une variable ActualGroundTime qui correspond à ActualElapsedTime moins AirTime
mutate(hflights, ActualGroundTime = ActualElapsedTime - AirTime)
# Ajouter une variable AverageSpeed qui donne la vitesse moyenne du vol et ordonner la table selon les valeurs décroissantes de cette variable
hflights |>
mutate(AverageSpeed = Distance/AirTime) |>
arrange(-AverageSpeed) # ordre décroissante
# Sélectionner les vols à destination de JFK
filter(hflights, Dest == "JFK")
# Calculer le nombre de vols à destination de JFK
hflights |>
filter(Dest == "JFK") |>
summarise(nombre_de_vols = n())
# Résumé des données
hflights |>
select(Dest, UniqueCarrier) |>
summarise(n = n(),
n_dest = n_distinct(Dest),
n_carrier = n_distinct(UniqueCarrier))
# Résumlé des données de la compagnie AA
hflights |>
filter(UniqueCarrier == "AA") |>
summarise(nb_vols = n(),
vols_annulees = sum(Cancelled),
ArrDelayAverage = mean(ArrDelay, na.rm = TRUE))
# Manipulation des groupes
hflights |>
group_by(UniqueCarrier) |>
summarise(nombre_vols = n(),
AirTimeMean = mean(AirTime, na.rm = TRUE)) |>
ggplot()+aes(x=UniqueCarrier, y=AirTimeMean)+
geom_point()
# Ordonner les compagnies en fonction des retards moyens au départ
hflights |>
group_by(UniqueCarrier) |>
summarise(Retards_moyens = n()) |>
arrange(Retards_moyens)
# Importer les données
tbl <- read.csv("Tennis-Major-Tournaments-Match-Statistics/FrenchOpen-men-2013.csv")
tbl <- as_tibble(tbl)
# Afficher le nom des adversaires de Roger Federer
tbl |>
filter(Player2 == "Roger Federer") |>
select(Player1) # prendre uniquement le onom des joueurs
# Afficher le nom des demi-finalistes
tbl |>
filter(Round == 6) |>
select(Player1, Player2)
# Points disputés en moyenne par match
tbl |>
mutate(TotalPoints = TPW.1+TPW.2) |>
summarise(TotalPointsMean = mean(TotalPoints))
# Aces par match en moyenne
tbl |>
select(contains("ACE")) |>
mutate(ACE = ACE.1 + ACE.2) |>
summarise(moyenne_ace = mean(ACE))
# Moyenne d'aces à chaque tour
tbl |>
group_by(Round)|>
select(contains("ACE")) |>
mutate(ACE = ACE.1 + ACE.2) |>
summarise(moyenne_ace = mean(ACE))
# Nombre de doubles fautes dans le tournoi
tbl |>
select(contains("DBF")) |>
mutate(DBF = DBF.1 + DBF.2) |>
summarise(total_double_fautes = sum(DBF, na.rm = TRUE))
# Importation des données pour le tournoi Winbledon masculin 2013
knitr::opts_chunk$set(echo = TRUE)
#création d'une variable revenue
set.seed(0)
xy <- cbind(x=runif(1000, 0, 100), y=runif(1000, 0, 100))
income <- (runif(1000) * abs((xy[,1] - 50) * (xy[,2] - 50))) / 500
par(mfrow=c(1,3), las=1)
plot(sort(income), col=rev(terrain.colors(1000)), pch=20, cex=.75, ylab='income')
hist(income, main='', col=rev(terrain.colors(10)),  xlim=c(0,5), breaks=seq(0,5,0.5))
plot(xy, xlim=c(0,100), ylim=c(0,100), cex=income, col=rev(terrain.colors(50))[10*(income+1)])
n <- length(income)
G <- (2 * sum(sort(income) * 1:n)/sum(income) - (n + 1)) / n
G
library(terra)
v <- vect(xy)
v$income <- income
r1 <- rast(ncol=1, nrow=4, xmin=0, xmax=100, ymin=0, ymax=100)
r1 <- rasterize(v, r1, "income", mean)
r2 <- rast(ncol=4, nrow=1, xmin=0, xmax=100, ymin=0, ymax=100)
r2 <- rasterize(v, r2, "income", mean)
r3 <- rast(ncol=2, nrow=2, xmin=0, xmax=100, ymin=0, ymax=100)
r3 <- rasterize(v, r3, "income", mean)
r4 <- rast(ncol=3, nrow=3, xmin=0, xmax=100, ymin=0, ymax=100)
r4 <- rasterize(v, r4, "income", mean)
r5 <- rast(ncol=5, nrow=5, xmin=0, xmax=100, ymin=0, ymax=100)
r5 <- rasterize(v, r5, "income", mean)
r6 <- rast(ncol=10, nrow=10, xmin=0, xmax=100, ymin=0, ymax=100)
r6 <- rasterize(v, r6, "income", mean)
par(mfrow=c(2,3), las=1)
plot(r1); plot(r2); plot(r3); plot(r4); plot(r5); plot(r6)
par(mfrow=c(1,3), las=1)
hist(r4, col=rev(terrain.colors(10)), xlim=c(0,5), breaks=seq(0, 5, 0.5))
hist(r5, main="", col=rev(terrain.colors(10)), xlim=c(0,5), breaks=seq(0, 5, 0.5))
hist(r6, main="", col=rev(terrain.colors(10)), xlim=c(0,5), breaks=seq(0, 5, 0.5))
sample(500,300)
sample(1:500,300)
knitr::opts_chunk$set(echo = TRUE)
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
library(plotly)
library(plotly)
hits <- read_delim("songs_normalize.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(hits)
plot_ly(df %>% arrange(desc(popularity)),
x = ~genre, y = ~popularity,
type = "histogram",
marker = list(color = "lightgreen"),
showlegend = FALSE,
marginal = "box") %>%
layout(title = "<b>Popular genres based on popularity</b>",
xaxis = list(title = "Genre"),
yaxis = list(title = "Popularity"),
template = "plotly_dark",
title_x = 0.5)
fig <- plot_ly(hits %>% arrange(desc(popularity)),
x = ~genre, y = ~popularity,
type = "histogram",
marker = list(color = "lightgreen"),
showlegend = FALSE,
marginal = "box") %>%
layout(title = "<b>Popular genres based on popularity</b>",
xaxis = list(title = "Genre"),
yaxis = list(title = "Popularity"),
template = "plotly_dark",
title_x = 0.5)
fig
hits$genre
as.factor(hits$genre)
summary(as.factor(hits$genre))
summary(as.factor(hits$genre))
knitr::opts_chunk$set(echo = TRUE)
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
library(readxl)
library(plotly)
df <- read_xls("songs_normalize.xls")
fig <- plot_ly(df %>% arrange(desc(popularity)),
x = ~genre, y = ~popularity,
type = "histogram",
marker = list(color = "lightgreen"),
showlegend = FALSE,
marginal = "box") %>%
layout(title = "<b>Popular genres based on popularity</b>",
xaxis = list(title = "Genre"),
yaxis = list(title = "Popularity"),
template = "plotly_dark",
title_x = 0.5)
fig
summary(as.factor(df$genre))
fig
plot_ly(df %>% arrange(desc(popularity)),
x = ~genre, y = ~popularity,
type = "bar",
marker = list(color = "lightgreen"),
showlegend = FALSE,
marginal = "box") %>%
layout(title = "<b>Popular genres based on popularity</b>",
xaxis = list(title = "Genre"),
yaxis = list(title = "Popularity"),
template = "plotly_dark",
title_x = 0.5)
plot_ly(df %>% arrange(-popularity),
x = ~genre, y = ~popularity,
type = "bar",
marker = list(color = "lightgreen"),
showlegend = FALSE,
marginal = "box") %>%
layout(title = "<b>Popular genres based on popularity</b>",
xaxis = list(title = "Genre"),
yaxis = list(title = "Popularity"),
template = "plotly_dark",
title_x = 0.5)
shiny::runApp('Library/CloudStorage/OneDrive-Personnel/Bureau/Master MAS/Logiciel R/R Shiny/NBA Shiny Dashboard')
shiny::runApp('Library/CloudStorage/OneDrive-Personnel/Bureau/Master MAS/Logiciel R/R Shiny/NBA Shiny Dashboard')
runApp('Library/CloudStorage/OneDrive-Personnel/Bureau/Master MAS/Logiciel R/R Shiny/NBA Shiny Dashboard')
shiny::runApp('Library/CloudStorage/OneDrive-Personnel/Bureau/Master MAS/Logiciel R/R Shiny/NBA Shiny Dashboard')
runApp('Library/CloudStorage/OneDrive-Personnel/Bureau/Master MAS/Logiciel R/R Shiny/NBA Shiny Dashboard')
runApp('Library/CloudStorage/OneDrive-Personnel/Bureau/Master MAS/Logiciel R/R Shiny/NBA Shiny Dashboard')
View(famous_players)
shiny::runApp('Library/CloudStorage/OneDrive-Personnel/Bureau/Master MAS/Logiciel R/R Shiny/NBA Shiny Dashboard')
shiny::runApp()
runApp()
shiny::runApp()
setwd("C:/Users/monke/Bureau/Projet_academique/M1_S1_R/Visualisation_donnees/projet/NBA Shiny Dashboard/NBA Shiny Dashboard")
runApp()
install.packages("colourpicker")
runApp()
runApp()
