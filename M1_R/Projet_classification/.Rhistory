}
vecteur <- res_HCPC$data.clust$clust==1
#sum(vecteur==TRUE) # nombre de pays à aider prioritairement
pays_prioritaires <- res_HCPC$data.clust |>
filter(clust==1)
paste("le nombre de pays a aider en priorite est: ",nrow(pays_prioritaires))
noms <- c()
#paste("ces pays sont:")
for(nom in row.names(pays_prioritaires)){
print("- ",nom)
}
vecteur <- res_HCPC$data.clust$clust==1
#sum(vecteur==TRUE) # nombre de pays à aider prioritairement
pays_prioritaires <- res_HCPC$data.clust |>
filter(clust==1)
paste("le nombre de pays a aider en priorite est: ",nrow(pays_prioritaires))
noms <- c()
paste("ces pays sont:")
paste(row.names(pays_prioritaires),sep=";")
vecteur <- res_HCPC$data.clust$clust==1
#sum(vecteur==TRUE) # nombre de pays à aider prioritairement
pays_prioritaires <- res_HCPC$data.clust |>
filter(clust==1)
paste("le nombre de pays a aider en priorite est: ",nrow(pays_prioritaires))
noms <- c()
paste("ces pays sont:")
paste(row.names(pays_prioritaires),collapse =";")
vecteur <- res_HCPC$data.clust$clust==1
#sum(vecteur==TRUE) # nombre de pays à aider prioritairement
pays_prioritaires <- res_HCPC$data.clust |>
filter(clust==1)
paste("le nombre de pays a aider en priorite est: ",nrow(pays_prioritaires))
noms <- c()
paste("ces pays sont:")
paste(row.names(pays_prioritaires),collapse ="-")
vecteur <- res_HCPC$data.clust$clust==1
#sum(vecteur==TRUE) # nombre de pays à aider prioritairement
pays_prioritaires <- res_HCPC$data.clust |>
filter(clust==1)
paste("le nombre de pays a aider en priorite est: ",nrow(pays_prioritaires))
noms <- c()
paste("ces pays sont:")
paste(row.names(pays_prioritaires),collapse =" ; ")
groupe_1
# Pays les plus "pauvres"
groupe_1 <- data[pays_kmeans$cluster == 1, ] #groupe_1 # 109 individus
# Pays "moyens"
groupe_2 <- data[pays_kmeans$cluster == 2, ]
# Pays les plus "riches"
groupe_3 <- data[pays_kmeans$cluster == 3, ]
paste("Nous trouvons ",nrow(groupe_1)," pays pauvres. Ces pays sont: ")
paste(row.names(groupe_1),collapse =" ; ")
paste("Nous trouvons ",nrow(groupe_2)," pays moyens. Ces pays sont: ")
paste(row.names(groupe_2),collapse =" ; ")
paste("Nous trouvons ",nrow(groupe_3)," pays riches. Ces pays sont: ")
paste(row.names(groupe_3),collapse =" ; ")
# Pays les plus "pauvres"
groupe_1 <- data[pays_kmeans$cluster == 1, ] #groupe_1 # 109 individus
# Pays "moyens"
groupe_2 <- data[pays_kmeans$cluster == 2, ]
# Pays les plus "riches"
groupe_3 <- data[pays_kmeans$cluster == 3, ]
paste("Nous trouvons ",nrow(groupe_1)," pays pauvres. Ces pays sont: ")
paste(row.names(groupe_1),collapse =" ; ")
paste("Ensuite, nous trouvons ",nrow(groupe_2)," pays moyens. Ces pays sont: ")
paste(row.names(groupe_2),collapse =" ; ")
paste("Finalement, nous trouvons ",nrow(groupe_3)," pays riches. Ces pays sont: ")
paste(row.names(groupe_3),collapse =" ; ")
groupe_2 <- data[pays_kmeans$cluster == 2, ]
groupe_3 <- data[pays_kmeans$cluster == 3, ]
groupes <- c("groupe_1","groupe_2","groupe_3")
nbre_pays <- c(nrow(groupe_1),nrow(groupe_2),nrow(groupe_3))
somme_a_allouer <- 10000000 #les 10000000$ a allouer aux pays
proportion1 <- nrow(groupe_1)/nrow(data2)
proportion2 <- nrow(groupe_2)/nrow(data2)
proportion3 <- nrow(groupe_3)/nrow(data2)
proportions <- c(proportion1,proportion2,proportion3)
ordre1 <- 1
ordre2 <- 2
ordre3 <- 3
ordres <- c(ordre1,ordre2,ordre3)
valeur_ordre1 <- (ordre3-0.5)/(1.5*3) # car on se base sur la priorite. Donc la valeur d'ordre 1 signifie la plus grande priorite
valeur_ordre2 <- (ordre2-0.5)/(1.5*3)
valeur_ordre3 <- (ordre1-0.5)/(1.5*3)
valeur_ordres <- c(valeur_ordre1,valeur_ordre2,valeur_ordre3)
allocation_de_classe <- somme_a_allouer*(valeur_ordres+proportions)/2
allocation_de_chaque_pays <- allocation_de_classe/nbre_pays
resume <- data.frame(groupes,nbre_pays,proportions,ordres,valeur_ordres,allocation_de_classe,
allocation_de_chaque_pays)
resume
#sum(resume$allocation_de_classe) #pour verifier que la somme donne 10000000
library(stargazer)
groupe_2 <- data[pays_kmeans$cluster == 2, ]
groupe_3 <- data[pays_kmeans$cluster == 3, ]
groupes <- c("groupe_1","groupe_2","groupe_3")
nbre_pays <- c(nrow(groupe_1),nrow(groupe_2),nrow(groupe_3))
somme_a_allouer <- 10000000 #les 10000000$ a allouer aux pays
proportion1 <- nrow(groupe_1)/nrow(data2)
proportion2 <- nrow(groupe_2)/nrow(data2)
proportion3 <- nrow(groupe_3)/nrow(data2)
proportions <- c(proportion1,proportion2,proportion3)
ordre1 <- 1
ordre2 <- 2
ordre3 <- 3
ordres <- c(ordre1,ordre2,ordre3)
valeur_ordre1 <- (ordre3-0.5)/(1.5*3) # car on se base sur la priorite. Donc la valeur d'ordre 1 signifie la plus grande priorite
valeur_ordre2 <- (ordre2-0.5)/(1.5*3)
valeur_ordre3 <- (ordre1-0.5)/(1.5*3)
valeur_ordres <- c(valeur_ordre1,valeur_ordre2,valeur_ordre3)
allocation_de_classe <- somme_a_allouer*(valeur_ordres+proportions)/2
allocation_de_chaque_pays <- allocation_de_classe/nbre_pays
resume <- data.frame(groupes,nbre_pays,proportions,ordres,valeur_ordres,allocation_de_classe,
allocation_de_chaque_pays)
stargazer(resume,type="text")
#sum(resume$allocation_de_classe) #pour verifier que la somme donne 10000000
resume
pays_moyens_grpe1 <- res_HCPC$data.clust |>
filter(clust==2)
pays_riches_grpe1 <- res_HCPC$data.clust |>
filter(clust==3)
sous_groupe1 <- c("sous_groupe_1","sous_groupe_2","sous_groupe_3") # les sous-groupes des pays pauvres
nbre_sous_pays <- c(nrow(pays_prioritaires),nrow(pays_moyens_grpe1),nrow(pays_riches_grpe1))
somme_a_allouer_dans_grpe1 <- allocation_de_classe[1] #la somme a allouer aux pays pauvres(ie du groupe 1)
sous_proportion1 <- nrow(pays_prioritaires)/nrow(groupe_1)
sous_proportion2 <- nrow(pays_moyens_grpe1)/nrow(groupe_1)
sous_proportion3 <- nrow(pays_riches_grpe1)/nrow(groupe_1)
sous_proportions <- c(sous_proportion1,sous_proportion2,sous_proportion3)
# Les ordres et les valeurs d'ordre seront pareil car on les a diviser en 3 groupe, donc 3 modalites ordinales. Ce qui est pareil que le travail effectuer precedemment
allocation_de_sous_classe <- somme_a_allouer_dans_grpe1*(valeur_ordres+sous_proportions)/2
allocation_de_chaque_sous_pays <- allocation_de_sous_classe/nbre_sous_pays
sous_resume <- data.frame(sous_groupe1,nbre_sous_pays,sous_proportions,ordres,valeur_ordres,
allocation_de_sous_classe,allocation_de_chaque_sous_pays)
sous_resume
#sum(allocation_de_sous_classe) # pour verifier la sommme des allocations=a l'allocation trouver pour le groupe1
par(mfrow=c(1,3))
plot(rev(CAH_sward$height),type = "b",ylab = "Inertie intra",xlab = "Nombre de classes Saut minimale")
plot(rev(CAH_sward$height),type = "b",ylab = "Inertie intra",xlab = "Nombre de classes Saut maximale")
plot(rev(CAH_sward$height),type = "b",ylab = "Inertie intra",xlab = "Nombre de classes Ward")
knitr::opts_chunk$set(echo = TRUE)
# install.packages("factoextra")
library(factoextra)
library(dplyr)
library(tidyverse)
library(FactoMineR)
library(cowplot)
library(cluster)
library(NbClust)
library(Factoshiny)
library(leaflet)
library(countrycode)
library(rnaturalearth)
library(plotly)
library(rAmCharts)
library(sf)
library(GGally)
library(cowplot)
library(stargazer)
# Import
data <- read.csv("Pays_donnees.csv",header=TRUE, dec=".", sep=",", row.names = 1)
data2 <- read.csv("Pays_donnees.csv",header=TRUE, dec=".", sep=",") # sans row.names
## Description des variables
summary(data)
#sum(is.na(data))
box_EM <- ggplot(data)+geom_boxplot(aes(y=enfant_mort))+ggtitle("boite a moustache des enfants morts")
box_exports <- ggplot(data)+geom_boxplot(aes(y=exports))+ggtitle("boite a moustache des exports")
box_sante <- ggplot(data)+geom_boxplot(aes(y=sante))+ggtitle("boite a moustache de la depense en sante(% du PIB)")
box_imports <- ggplot(data)+geom_boxplot(aes(y=imports))+ggtitle("boite a moustache des imports")
box_revenu <- ggplot(data)+geom_boxplot(aes(y=revenu))+ggtitle("boite a moustache des revenus moyens")
box_inflation <- ggplot(data)+geom_boxplot(aes(y=inflation))+ggtitle("boite a moustache du taux de croissance du PIB")
box_EV <- ggplot(data)+geom_boxplot(aes(y=esper_vie))+ggtitle("boite a moustache de l'esperance de vie")
box_fert <- ggplot(data)+geom_boxplot(aes(y=fert))+ggtitle("boite a moustache du nbre moyen d'enfants par femme")
box_pib <- ggplot(data)+geom_boxplot(aes(y=pib_h))+ggtitle("boite a moustache du PIB/hbts")
plot_grid(box_EM,box_exports,box_sante,box_imports,box_revenu,box_inflation,box_EV,box_fert,box_pib,ncol=3,nrow=3)
# Matrice de corrélation
matrix_cor <- cor(as.matrix(data2[, 2:10]))
#matrix_cor
# Corrélogramme
ggcorr(data, method = c("everything", "pearson"),low = "#F21A00",mid = "#EEEEEE",high = "#3B9AB2", hjust=0.7, nbreaks = 8, label = TRUE, label_round = 1)
# correlation entre fert et enfant_mort
model2 <- lm(fert~enfant_mort,data=data2)
data2 |> plot_ly(x=~enfant_mort,y=~fert) |>
add_markers(type="scatter", mode="markers",
marker=list(color="red"),name="Nuage de points") |>
add_trace(y=fitted(model2),type="scatter",mode='lines',
name="Régression",line=list(color="blue")) %>%
layout(title="Correlation entre fert et enfant_mort",xaxis=list(title="nombre d'enfants morts"),
yaxis=list(title="Nombre moyen d'enfants par femme"))
exports_revenu <- ggplot(data,aes(x=revenu,y=exports))+
geom_point()+
geom_smooth(method = 'loess',color='red')+
ggtitle("Correlation entre exports et revenu")
exports_revenu
esper_revenu <- ggplot(data,aes(x=revenu,y=esper_vie))+
geom_point()+
geom_smooth(method = 'loess',color='red')+
ggtitle(" Correlation entre esper_vie et revenu ")
esper_revenu
## ACP
acp <- PCA(data, graph = FALSE)
# Choix du nombre de dimension/ choix des axes
barplot(acp$eig[,2])
# Dimension 1 à 4 ==> 87% de l'information
# Graphique des variables
par(mfrow=c(3,1))
plot(acp, choix = "var", axes=c(1,2),title="ACP sur les axes 1 et 2")
plot(acp, choix = "var", axes=c(3,4),title="ACP sur les axes 3 et 4")
# Graphique des individus
plot(acp, choix="ind",title="graphique des individus")
# PCAshiny(data) ## lancement interface factoshiny
## ACP
acp <- PCA(data, graph = FALSE)
par(mfrow=c(2,2))
# Choix du nombre de dimension/ choix des axes
barplot(acp$eig[,2])
# Dimension 1 à 4 ==> 87% de l'information
# Graphique des variables
plot(acp, choix = "var", axes=c(1,2),title="ACP sur les axes 1 et 2")
plot(acp, choix = "var", axes=c(3,4),title="ACP sur les axes 3 et 4")
# Graphique des individus
plot(acp, choix="ind",title="graphique des individus")
# PCAshiny(data) ## lancement interface factoshiny
## ACP
acp <- PCA(data, graph = FALSE)
par(mfrow=c(2,2))
# Choix du nombre de dimension/ choix des axes
barplot(acp$eig[,2])# Dimension 1 à 4 ==> 87% de l'information
plot(acp, choix = "var", axes=c(1,2),title="ACP sur les axes 1 et 2")# Graphique des variables
plot(acp, choix = "var", axes=c(3,4),title="ACP sur les axes 3 et 4")# Graphique des variables
plot(acp, choix="ind",title="graphique des individus")# Graphique des individus
# PCAshiny(data) ## lancement interface factoshiny
## ACP
acp <- PCA(data, graph = FALSE)
par(mfrow=c(2,2))
barplot(acp$eig[,2])# Choix du nombre de dimension/ choix des axes# Dimension 1 à 4 ==> 87% de l'information
plot(acp, choix = "var", axes=c(1,2),title="ACP sur les axes 1 et 2")# Graphique des variables
plot(acp, choix = "var", axes=c(3,4),title="ACP sur les axes 3 et 4")# Graphique des variables
plot(acp, choix="ind",title="graphique des individus")# Graphique des individus
# PCAshiny(data) ## lancement interface factoshiny
## ACP
acp <- PCA(data, graph = FALSE)
par(mfrow=c(2,2))
barplot(acp$eig[,2])# Choix du nombre de dimension/ choix des axes# Dimension 1 à 4 ==> 87% de l'information
plot(acp, choix = "var", axes=c(1,2),title="ACP sur les axes 1 et 2")# Graphique des variables
plot(acp, choix = "var", axes=c(3,4),title="ACP sur les axes 3 et 4")# Graphique des variables
plot(acp, choix="ind",title="graphique des individus")# Graphique des individus
# PCAshiny(data) ## lancement interface factoshiny
par(mfrow=c(2,2))
barplot(acp$eig[,2])# Choix du nombre de dimension/ choix des axes# Dimension 1 à 4 ==> 87% de l'information
plot(acp, choix = "var", axes=c(1,2),title="ACP sur les axes 1 et 2")# Graphique des variables
plot(acp, choix = "var", axes=c(3,4),title="ACP sur les axes 3 et 4")# Graphique des variables
plot(acp, choix="ind",title="graphique des individus")#
## ACP
acp <- PCA(data, graph = FALSE)
barplot(acp$eig[,2])# Choix du nombre de dimension/ choix des axes# Dimension 1 à 4 ==> 87% de l'information
par(mfrow=c(2,2))
plot(acp, choix = "var", axes=c(1,2),title="ACP sur les axes 1 et 2")# Graphique des variables
plot(acp, choix = "var", axes=c(3,4),title="ACP sur les axes 3 et 4")# Graphique des variables
plot(acp, choix="ind",title="graphique des individus")# Graphique des individus
# PCAshiny(data) ## lancement interface factoshiny
## ACP
acp <- PCA(data, graph = FALSE)
# Choix du nombre de dimension/ choix des axes
barplot(acp$eig[,2])# Dimension 1 à 4 ==> 87% de l'information
# Graphique des variables
plot(acp, choix = "var", axes=c(1,2),title="ACP sur les axes 1 et 2")
plot(acp, choix = "var", axes=c(3,4),title="ACP sur les axes 3 et 4")
# Graphique des individus
plot(acp, choix="ind",title="graphique des individus")
# PCAshiny(data) ## lancement interface factoshiny
### Table pour la carte
#### Geometry & code des pays
ne_countries <- ne_countries(scale = "medium", returnclass = "sf")
#### Conservation des colonnes noms de pays et leurs countries_code
code_countries <- ne_countries |>
select("sovereignt","iso_a3")
code_countries <- as.data.frame(code_countries) # transformation en data frame
colnames(code_countries)[1] <- "pays"
code_countries
### Nettoyage & Jointure (avec ne_countries ==> package countrycode )
#nrow(data2)
# Notre table final devra avoir 167 après la jointure.
##### Correction des noms pour la jointure
pays <- setdiff(data2$pays, code_countries$pays) # 15 pays non correspondant
##### Correction
data2$pays <- gsub("Bahamas", "The Bahamas", data2$pays)
data2$pays <- gsub("Congo Dem. Rep.", "Democratic Republic of the Congo", data2$pays)
data2$pays <- gsub("Congo Rep.", "Republic of Congo", data2$pays)
data2$pays <- gsub("Cote d'Ivoire", "Ivory Coast", data2$pays)
data2$pays <- gsub("Guinea-Bissau", "Guinea Bissau", data2$pays)
data2$pays <- gsub("Kyrgyz Republic", "Kyrgyzstan", data2$pays)
data2$pays <- gsub("Lao", "Laos", data2$pays)
data2$pays <- gsub("Macedonia FYR", "Macedonia", data2$pays)
data2$pays <- gsub("Micronesia Fed. Sts.", "Federated States of Micronesia", data2$pays)
data2$pays <- gsub("Serbia", "Republic of Serbia", data2$pays)
data2$pays <- gsub("Slovak Republic", "Slovakia", data2$pays)
data2$pays <- gsub("St. Vincent and the Grenadines", "Saint Vincent and the Grenadines", data2$pays)
data2$pays <- gsub("Tanzania","United Republic of Tanzania", data2$pays)
data2$pays <- gsub("Timor-Leste", "East Timor", data2$pays)
data2$pays <- gsub("United States", "United States of America", data2$pays)
##### Jointure
nationalite <- left_join(data2,code_countries,by = "pays")
#nrow(nationalite) # Problème de doublons
##### PB de doublon
liste_doublon <- rownames(as.data.frame(which(table(nationalite$pays) != 1))) # 10 pays à traiter
table_doublon <- subset(nationalite, pays %in% liste_doublon) # table des pays avec doublons (extractions)
doublon_traite <- subset(table_doublon, (pays == "France" & iso_a3 == "FRA")| (pays == "Australia" & iso_a3 == "AUS")|(pays == "China" & iso_a3 == "CHN")|(pays == "Denmark" & iso_a3 == "DNK")|(pays == "Finland" & iso_a3 == "FIN")|(pays == "Israel" & iso_a3 == "ISR")|(pays == "Netherlands" & iso_a3 == "NLD")|(pays == "New Zealand" & iso_a3 == "NZL")|(pays == "United Kingdom" & iso_a3 == "GBR")|(pays == "United States of America" & iso_a3 == "USA"))
nationalite_sd <- nationalite |>
filter(!pays %in% liste_doublon) # table nationalité auquel on a enlever les doublons
data_pays <- arrange(rbind(nationalite_sd,doublon_traite),pays)
# Au format sf pour la carte
data_pays <- st_as_sf(data_pays)
#class(data_pays)
#######Affichage carte
pal <- colorBin("YlOrRd", domain = data_pays$esper_vie,bins = c(30, 40, 50, 60, 70, 80, 90,100))
map <- leaflet(data_pays) |>
addTiles() |>
addPolygons(fillColor = ~ pal(esper_vie),
fillOpacity = 0.8,
color = "black",
weight = 1,
popup = ~paste("<strong>esper_vie:</strong> ", data_pays$iso_a3, "<br>", "<strong>EDV:</strong> ", data_pays$esper_vie)) |>
addLegend(pal = colorNumeric("YlOrRd", data_pays$esper_vie), values = data_pays$esper_vie, position = "bottomright", title = "Espérance de vie dans le monde")
map
#### Matrice de distance
matrice_dist <- dist(data2[,2:ncol(data2)])
matrice_dist
#### Saut minimale
CAH_smin <- hclust(matrice_dist, method="single")
plot(CAH_smin,hang=-1)
#### Saut maximale
CAH_smax <- hclust(matrice_dist, method="complete")
plot(CAH_smax,hang=-1,title="Dendogramme avec la methode du saut maximal")
#### Ward
CAH_sward <- hclust(matrice_dist, method="ward.D")
plot(CAH_sward,hang=-1,title="Dendogramme avec la methode de Ward")
par(mfrow=c(1,3))
plot(rev(CAH_sward$height),type = "b",ylab = "Inertie intra",xlab = "Nombre de classes Saut minimale")
plot(rev(CAH_sward$height),type = "b",ylab = "Inertie intra",xlab = "Nombre de classes Saut maximale")
plot(rev(CAH_sward$height),type = "b",ylab = "Inertie intra",xlab = "Nombre de classes Ward")
#### Obtentions des centres de gravité de la CAH
# Fonction pour récupérer Gk (centre gravité intra-classe)
cah_centers <- function(jeu, k) {
# Effectuer la CAH
mat_dist <- dist(jeu)
hc <- hclust(mat_dist, method = "ward.D2")
# Obtentions classes en fonction de k
cl <- cutree(hc, k)
# Calculer le centre de gravité de chaque classe
centers <- aggregate(jeu, by=list(cl), FUN=mean)[,-1]
return(centers)
}
cg <- cah_centers(data,3) # vecteur des centres de gravité
#class(cg)
## Méthode des centres mobiles (K-Means)
pays_kmeans <- kmeans(data,cg)
#pays_kmeans
# Exécuter une ACP sur vos données
res.acp <- princomp(data, cor = TRUE)
# Utiliser la fonction fviz_cluster pour représenter vos groupes sur un axe de l'ACP
fviz_cluster(pays_kmeans, geom = "point", data = res.acp$score[,1:2])
res.PCA<-PCA(data,ncp=8,graph=FALSE)
res.HCPC<-HCPC(res.PCA,nb.clust=3,consol=TRUE,graph=FALSE)
plot.HCPC(res.HCPC,choice='map',draw.tree=FALSE,title='Plan factoriel')
res.PCA<-PCA(data,ncp=8,graph=FALSE)
res.HCPC<-HCPC(res.PCA,nb.clust=3,consol=TRUE,graph=FALSE)
plot.HCPC(res.HCPC,choice='map',draw.tree=FALSE,title='Plan factoriel')
# Pays les plus "pauvres"
groupe_1 <- data[pays_kmeans$cluster == 1, ]
# Pays "moyens"
groupe_2 <- data[pays_kmeans$cluster == 2, ]
# Pays les plus "riches"
groupe_3 <- data[pays_kmeans$cluster == 3, ]
paste("Nous trouvons ",nrow(groupe_1)," pays pauvres. Ces pays sont: ")
paste(row.names(groupe_1),collapse =" ; ")
paste("Ensuite, nous trouvons ",nrow(groupe_2)," pays moyens. Ces pays sont: ")
paste(row.names(groupe_2),collapse =" ; ")
paste("Finalement, nous trouvons ",nrow(groupe_3)," pays riches. Ces pays sont: ")
paste(row.names(groupe_3),collapse =" ; ")
#PCAshiny(groupe_1)
res_PCA<-PCA(groupe_1,ncp=8,graph=FALSE) # ncp = 8 on essaye de garder toute l'information
res_HCPC<-HCPC(res_PCA,nb.clust=3,consol=FALSE,graph=FALSE)
par(mfrow=c(1,3))
plot.HCPC(res_HCPC,choice='tree',title='Arbre hiérarchique')
plot.HCPC(res_HCPC,choice='map',draw.tree=FALSE,title='Plan factoriel')
plot.HCPC(res_HCPC,choice='3D.map',ind.names=FALSE,centers.plot=FALSE,angle=60,title='Arbre hiérarchique sur le plan factoriel')
#res_HCPC$data.clust
#PCAshiny(groupe_1)
res_PCA<-PCA(groupe_1,ncp=8,graph=FALSE) # ncp = 8 on essaye de garder toute l'information
res_HCPC<-HCPC(res_PCA,nb.clust=3,consol=FALSE,graph=FALSE)
par(mfrow=c(1,2))
plot.HCPC(res_HCPC,choice='tree',title='Arbre hiérarchique')
plot.HCPC(res_HCPC,choice='map',draw.tree=FALSE,title='Plan factoriel')
plot.HCPC(res_HCPC,choice='3D.map',ind.names=FALSE,centers.plot=FALSE,angle=60,title='Arbre hiérarchique sur le plan factoriel')
#res_HCPC$data.clust
vecteur <- res_HCPC$data.clust$clust==1
#sum(vecteur==TRUE) # nombre de pays à aider prioritairement
pays_prioritaires <- res_HCPC$data.clust |>
filter(clust==1)
paste("le nombre de pays a aider en priorite est: ",nrow(pays_prioritaires))
paste("ces pays sont:")
paste(row.names(pays_prioritaires),collapse =" ; ")
groupe_2 <- data[pays_kmeans$cluster == 2, ]
groupe_3 <- data[pays_kmeans$cluster == 3, ]
groupes <- c("groupe_1","groupe_2","groupe_3")
nbre_pays <- c(nrow(groupe_1),nrow(groupe_2),nrow(groupe_3))
somme_a_allouer <- 10000000 # les 10000000$ à allouer aux pays
proportion1 <- nrow(groupe_1)/nrow(data2)
proportion2 <- nrow(groupe_2)/nrow(data2)
proportion3 <- nrow(groupe_3)/nrow(data2)
proportions <- c(proportion1,proportion2,proportion3)
ordre1 <- 1
ordre2 <- 2
ordre3 <- 3
ordres <- c(ordre1,ordre2,ordre3)
valeur_ordre1 <- (ordre3-0.5)/(3) # car on se base sur la priorite. Donc la valeur d'ordre 1 signifie la plus grande priorite
valeur_ordre2 <- (ordre2-0.5)/(3)
valeur_ordre3 <- (ordre1-0.5)/(3)
valeur_ordres <- c(valeur_ordre1,valeur_ordre2,valeur_ordre3)
allocation_de_classe <- somme_a_allouer*(valeur_ordres+proportions)/2.5
allocation_de_chaque_pays <- allocation_de_classe/nbre_pays
resume <- data.frame(groupes,nbre_pays,proportions,ordres,valeur_ordres,allocation_de_classe,allocation_de_chaque_pays)
resume
#sum(resume$allocation_de_classe) #pour verifier que la somme donne 10000000
sum(resume$allocation_de_classe) #pour verifier que la somme donne 10000000
groupe_2 <- data[pays_kmeans$cluster == 2, ]
groupe_3 <- data[pays_kmeans$cluster == 3, ]
groupes <- c("groupe_1","groupe_2","groupe_3")
nbre_pays <- c(nrow(groupe_1),nrow(groupe_2),nrow(groupe_3))
somme_a_allouer <- 10000000 # les 10000000$ à allouer aux pays
proportion1 <- nrow(groupe_1)/nrow(data2)
proportion2 <- nrow(groupe_2)/nrow(data2)
proportion3 <- nrow(groupe_3)/nrow(data2)
proportions <- c(proportion1,proportion2,proportion3)
ordre1 <- 1
ordre2 <- 2
ordre3 <- 3
ordres <- c(ordre1,ordre2,ordre3)
valeur_ordre1 <- (ordre3-0.5)/(3) # car on se base sur la priorite. Donc la valeur d'ordre 1 signifie la plus grande priorite
valeur_ordre2 <- (ordre2-0.5)/(3)
valeur_ordre3 <- (ordre1-0.5)/(3)
valeur_ordres <- c(valeur_ordre1,valeur_ordre2,valeur_ordre3)
allocation_de_classe <- somme_a_allouer*(valeur_ordres+proportions)/2.5
allocation_de_chaque_pays <- allocation_de_classe/nbre_pays
resume <- data.frame(groupes,nbre_pays,proportions,ordres,valeur_ordres,allocation_de_classe,allocation_de_chaque_pays)
resume
#sum(resume$allocation_de_classe) #pour verifier que la somme donne 10000000
# Transformation du groupe 2 initiale en groupe 4
groupe4 <- groupe_2
groupe4$clust <- "4"
# Transformation du groupe 3 initiale en groupe 5
groupe5 <- groupe_3
groupe5$clust <- "5"
base1 <- rbind(groupe4,groupe5)
base2 <- rbind(res_HCPC$data.clust,base1)
somme_a_allouer <- 10000000 # les 10000000$ à allouer aux pays
cluster1 <- base2[base2$clust==1,]
cluster2 <- base2[base2$clust==2,]
cluster3 <- base2[base2$clust==3,]
cluster4 <- base2[base2$clust==4,]
cluster5 <- base2[base2$clust==5,]
nombre_pays <- c(nrow(cluster1),nrow(cluster2),nrow(cluster3),nrow(cluster4),nrow(cluster5))
les_groupes <- c("1","2","3","4","5")
proportion_1 <- nrow(cluster1)/nrow(base2)
proportion_2 <- nrow(cluster2)/nrow(base2)
proportion_3 <- nrow(cluster3)/nrow(base2)
proportion_4 <- nrow(cluster4)/nrow(base2)
proportion_5 <- nrow(cluster5)/nrow(base2)
les_proportions <- c(proportion_1,proportion_2,proportion_3,proportion_4,proportion_5)
ordre1 <- 1
ordre2 <- 2
ordre3 <- 3
ordre4 <- 4
ordre5 <- 5
les_ordres <- c(ordre1,ordre2,ordre3, ordre4, ordre5)
valeur_ordre1 <- (ordre3-0.5)/(3) # car on se base sur la priorite. Donc la valeur d'ordre 1 signifie la plus grande priorite
valeur_ordre2 <- (ordre2-0.5)/(3)
valeur_ordre3 <- (ordre1-0.5)/(3)
v_ordre1 <- (ordre5-0.5)/(5)
v_ordre2 <- (ordre4-0.5)/(5)
v_ordre3 <- (ordre3-0.5)/(5)
v_ordre4 <- (ordre2-0.5)/(5)
v_ordre5 <- (ordre1-0.5)/(5)
valeur_des_ordres <- c(v_ordre1,v_ordre2,v_ordre3,v_ordre4,v_ordre5)
allocation_de_classe2 <- somme_a_allouer*(valeur_des_ordres+les_proportions)/3.5
allocation_de_chaque_pays2 <- allocation_de_classe2/nombre_pays
resume2 <- data.frame(les_groupes,nombre_pays,les_proportions,les_ordres,valeur_des_ordres,allocation_de_classe2,allocation_de_chaque_pays2)
resume2
#sum(resume2$allocation_de_classe2) #pour verifier que la somme est bien 10000000
sum(resume2$allocation_de_classe2) #pour verifier que la somme est bien 10000000
pays <- row.names(base2)
base2 <- cbind(base2,pays)
base2$allocation <- ifelse(base2$clust=="1",92738.89,
ifelse(base2$clust=="2",74251.50,
ifelse(base2$clust=="3",52822.93,
ifelse(base2$clust=="4",41598.44,29531.00))))
base_allocation <- base2[,c(11,12)]
data_pays2 <- merge(data_pays,base_allocation, by = "pays")
pal2 <- colorBin("YlOrRd", domain = data_pays2$allocation,bins = c(0,20000, 40000, 60000, 80000,100000))
map2 <- leaflet(data_pays2) |>
addTiles() |>
addPolygons(fillColor = ~ pal2(allocation),
fillOpacity = 0.8,
color = "black",
weight = 1,
popup = ~paste("<strong>esper_vie:</strong> ", data_pays2$iso_a3, "<br>", "<strong>EDV:</strong> ", data_pays2$allocation)) |>
addLegend(pal = colorNumeric("YlOrRd", data_pays2$allocation), values = data_pays2$allocation, position = "bottomright", title = "Montant des allocutions selon les pays.")
map2
esper_revenu <- ggplot(data,aes(x=revenu,y=esper_vie))+
geom_point()+
geom_smooth(method = 'loess',color='red')+
ggtitle(" Correlation entre esper_vie et revenu ")
esper_revenu
